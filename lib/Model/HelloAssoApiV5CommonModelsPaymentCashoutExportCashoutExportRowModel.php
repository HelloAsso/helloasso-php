<?php
/**
 * HelloAssoApiV5CommonModelsPaymentCashoutExportCashoutExportRowModel
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * HelloAsso API
 *
 * HelloAsso auto-generated SDK
 *
 * The version of the OpenAPI document: public
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HelloAssoApiV5CommonModelsPaymentCashoutExportCashoutExportRowModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HelloAssoApiV5CommonModelsPaymentCashoutExportCashoutExportRowModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HelloAsso.Api.V5.Common.Models.Payment.CashoutExport.CashoutExportRowModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'campaign_type' => '\OpenAPI\Client\Model\HelloAssoApiV5CommonModelsEnumsFormType',
        'campaign_name' => 'string',
        'operation_type' => '\OpenAPI\Client\Model\HelloAssoApiV5CommonModelsPaymentCashoutExportCashoutExportPaymentOperation',
        'credit' => 'float',
        'debit' => 'float',
        'order_id' => 'int',
        'payment_id' => 'int',
        'payment_date' => '\DateTime',
        'payment_method' => '\OpenAPI\Client\Model\HelloAssoApiV5CommonModelsEnumsPaymentMeans',
        'payment_status' => '\OpenAPI\Client\Model\HelloAssoApiV5CommonModelsPaymentCashoutExportCashoutExportPaymentStatus',
        'cash_out_date' => '\DateTime',
        'cash_out_id' => 'int',
        'designation' => 'string',
        'payer_company' => 'string',
        'payer_last_name' => 'string',
        'payer_first_name' => 'string',
        'payer_email' => 'string',
        'payer_siren' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'campaign_type' => null,
        'campaign_name' => null,
        'operation_type' => null,
        'credit' => 'double',
        'debit' => 'double',
        'order_id' => 'int32',
        'payment_id' => 'int32',
        'payment_date' => 'date-time',
        'payment_method' => null,
        'payment_status' => null,
        'cash_out_date' => 'date-time',
        'cash_out_id' => 'int32',
        'designation' => null,
        'payer_company' => null,
        'payer_last_name' => null,
        'payer_first_name' => null,
        'payer_email' => null,
        'payer_siren' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'campaign_type' => false,
        'campaign_name' => true,
        'operation_type' => false,
        'credit' => true,
        'debit' => true,
        'order_id' => true,
        'payment_id' => true,
        'payment_date' => true,
        'payment_method' => false,
        'payment_status' => false,
        'cash_out_date' => false,
        'cash_out_id' => false,
        'designation' => true,
        'payer_company' => true,
        'payer_last_name' => true,
        'payer_first_name' => true,
        'payer_email' => true,
        'payer_siren' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'campaign_type' => 'campaignType',
        'campaign_name' => 'campaignName',
        'operation_type' => 'operationType',
        'credit' => 'credit',
        'debit' => 'debit',
        'order_id' => 'orderId',
        'payment_id' => 'paymentId',
        'payment_date' => 'paymentDate',
        'payment_method' => 'paymentMethod',
        'payment_status' => 'paymentStatus',
        'cash_out_date' => 'cashOutDate',
        'cash_out_id' => 'cashOutId',
        'designation' => 'designation',
        'payer_company' => 'payerCompany',
        'payer_last_name' => 'payerLastName',
        'payer_first_name' => 'payerFirstName',
        'payer_email' => 'payerEmail',
        'payer_siren' => 'payerSiren'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'campaign_type' => 'setCampaignType',
        'campaign_name' => 'setCampaignName',
        'operation_type' => 'setOperationType',
        'credit' => 'setCredit',
        'debit' => 'setDebit',
        'order_id' => 'setOrderId',
        'payment_id' => 'setPaymentId',
        'payment_date' => 'setPaymentDate',
        'payment_method' => 'setPaymentMethod',
        'payment_status' => 'setPaymentStatus',
        'cash_out_date' => 'setCashOutDate',
        'cash_out_id' => 'setCashOutId',
        'designation' => 'setDesignation',
        'payer_company' => 'setPayerCompany',
        'payer_last_name' => 'setPayerLastName',
        'payer_first_name' => 'setPayerFirstName',
        'payer_email' => 'setPayerEmail',
        'payer_siren' => 'setPayerSiren'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'campaign_type' => 'getCampaignType',
        'campaign_name' => 'getCampaignName',
        'operation_type' => 'getOperationType',
        'credit' => 'getCredit',
        'debit' => 'getDebit',
        'order_id' => 'getOrderId',
        'payment_id' => 'getPaymentId',
        'payment_date' => 'getPaymentDate',
        'payment_method' => 'getPaymentMethod',
        'payment_status' => 'getPaymentStatus',
        'cash_out_date' => 'getCashOutDate',
        'cash_out_id' => 'getCashOutId',
        'designation' => 'getDesignation',
        'payer_company' => 'getPayerCompany',
        'payer_last_name' => 'getPayerLastName',
        'payer_first_name' => 'getPayerFirstName',
        'payer_email' => 'getPayerEmail',
        'payer_siren' => 'getPayerSiren'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('campaign_type', $data ?? [], null);
        $this->setIfExists('campaign_name', $data ?? [], null);
        $this->setIfExists('operation_type', $data ?? [], null);
        $this->setIfExists('credit', $data ?? [], null);
        $this->setIfExists('debit', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('payment_id', $data ?? [], null);
        $this->setIfExists('payment_date', $data ?? [], null);
        $this->setIfExists('payment_method', $data ?? [], null);
        $this->setIfExists('payment_status', $data ?? [], null);
        $this->setIfExists('cash_out_date', $data ?? [], null);
        $this->setIfExists('cash_out_id', $data ?? [], null);
        $this->setIfExists('designation', $data ?? [], null);
        $this->setIfExists('payer_company', $data ?? [], null);
        $this->setIfExists('payer_last_name', $data ?? [], null);
        $this->setIfExists('payer_first_name', $data ?? [], null);
        $this->setIfExists('payer_email', $data ?? [], null);
        $this->setIfExists('payer_siren', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets campaign_type
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5CommonModelsEnumsFormType|null
     */
    public function getCampaignType()
    {
        return $this->container['campaign_type'];
    }

    /**
     * Sets campaign_type
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5CommonModelsEnumsFormType|null $campaign_type campaign_type
     *
     * @return self
     */
    public function setCampaignType($campaign_type)
    {
        if (is_null($campaign_type)) {
            throw new \InvalidArgumentException('non-nullable campaign_type cannot be null');
        }
        $this->container['campaign_type'] = $campaign_type;

        return $this;
    }

    /**
     * Gets campaign_name
     *
     * @return string|null
     */
    public function getCampaignName()
    {
        return $this->container['campaign_name'];
    }

    /**
     * Sets campaign_name
     *
     * @param string|null $campaign_name campaign_name
     *
     * @return self
     */
    public function setCampaignName($campaign_name)
    {
        if (is_null($campaign_name)) {
            array_push($this->openAPINullablesSetToNull, 'campaign_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('campaign_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['campaign_name'] = $campaign_name;

        return $this;
    }

    /**
     * Gets operation_type
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5CommonModelsPaymentCashoutExportCashoutExportPaymentOperation|null
     */
    public function getOperationType()
    {
        return $this->container['operation_type'];
    }

    /**
     * Sets operation_type
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5CommonModelsPaymentCashoutExportCashoutExportPaymentOperation|null $operation_type operation_type
     *
     * @return self
     */
    public function setOperationType($operation_type)
    {
        if (is_null($operation_type)) {
            throw new \InvalidArgumentException('non-nullable operation_type cannot be null');
        }
        $this->container['operation_type'] = $operation_type;

        return $this;
    }

    /**
     * Gets credit
     *
     * @return float|null
     */
    public function getCredit()
    {
        return $this->container['credit'];
    }

    /**
     * Sets credit
     *
     * @param float|null $credit credit
     *
     * @return self
     */
    public function setCredit($credit)
    {
        if (is_null($credit)) {
            array_push($this->openAPINullablesSetToNull, 'credit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('credit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['credit'] = $credit;

        return $this;
    }

    /**
     * Gets debit
     *
     * @return float|null
     */
    public function getDebit()
    {
        return $this->container['debit'];
    }

    /**
     * Sets debit
     *
     * @param float|null $debit debit
     *
     * @return self
     */
    public function setDebit($debit)
    {
        if (is_null($debit)) {
            array_push($this->openAPINullablesSetToNull, 'debit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('debit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['debit'] = $debit;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return int|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int|null $order_id order_id
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            array_push($this->openAPINullablesSetToNull, 'order_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets payment_id
     *
     * @return int|null
     */
    public function getPaymentId()
    {
        return $this->container['payment_id'];
    }

    /**
     * Sets payment_id
     *
     * @param int|null $payment_id payment_id
     *
     * @return self
     */
    public function setPaymentId($payment_id)
    {
        if (is_null($payment_id)) {
            array_push($this->openAPINullablesSetToNull, 'payment_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_id'] = $payment_id;

        return $this;
    }

    /**
     * Gets payment_date
     *
     * @return \DateTime|null
     */
    public function getPaymentDate()
    {
        return $this->container['payment_date'];
    }

    /**
     * Sets payment_date
     *
     * @param \DateTime|null $payment_date payment_date
     *
     * @return self
     */
    public function setPaymentDate($payment_date)
    {
        if (is_null($payment_date)) {
            array_push($this->openAPINullablesSetToNull, 'payment_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_date'] = $payment_date;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5CommonModelsEnumsPaymentMeans|null
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5CommonModelsEnumsPaymentMeans|null $payment_method payment_method
     *
     * @return self
     */
    public function setPaymentMethod($payment_method)
    {
        if (is_null($payment_method)) {
            throw new \InvalidArgumentException('non-nullable payment_method cannot be null');
        }
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5CommonModelsPaymentCashoutExportCashoutExportPaymentStatus|null
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5CommonModelsPaymentCashoutExportCashoutExportPaymentStatus|null $payment_status payment_status
     *
     * @return self
     */
    public function setPaymentStatus($payment_status)
    {
        if (is_null($payment_status)) {
            throw new \InvalidArgumentException('non-nullable payment_status cannot be null');
        }
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets cash_out_date
     *
     * @return \DateTime|null
     */
    public function getCashOutDate()
    {
        return $this->container['cash_out_date'];
    }

    /**
     * Sets cash_out_date
     *
     * @param \DateTime|null $cash_out_date cash_out_date
     *
     * @return self
     */
    public function setCashOutDate($cash_out_date)
    {
        if (is_null($cash_out_date)) {
            throw new \InvalidArgumentException('non-nullable cash_out_date cannot be null');
        }
        $this->container['cash_out_date'] = $cash_out_date;

        return $this;
    }

    /**
     * Gets cash_out_id
     *
     * @return int|null
     */
    public function getCashOutId()
    {
        return $this->container['cash_out_id'];
    }

    /**
     * Sets cash_out_id
     *
     * @param int|null $cash_out_id cash_out_id
     *
     * @return self
     */
    public function setCashOutId($cash_out_id)
    {
        if (is_null($cash_out_id)) {
            throw new \InvalidArgumentException('non-nullable cash_out_id cannot be null');
        }
        $this->container['cash_out_id'] = $cash_out_id;

        return $this;
    }

    /**
     * Gets designation
     *
     * @return string|null
     */
    public function getDesignation()
    {
        return $this->container['designation'];
    }

    /**
     * Sets designation
     *
     * @param string|null $designation designation
     *
     * @return self
     */
    public function setDesignation($designation)
    {
        if (is_null($designation)) {
            array_push($this->openAPINullablesSetToNull, 'designation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('designation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['designation'] = $designation;

        return $this;
    }

    /**
     * Gets payer_company
     *
     * @return string|null
     */
    public function getPayerCompany()
    {
        return $this->container['payer_company'];
    }

    /**
     * Sets payer_company
     *
     * @param string|null $payer_company payer_company
     *
     * @return self
     */
    public function setPayerCompany($payer_company)
    {
        if (is_null($payer_company)) {
            array_push($this->openAPINullablesSetToNull, 'payer_company');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payer_company', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payer_company'] = $payer_company;

        return $this;
    }

    /**
     * Gets payer_last_name
     *
     * @return string|null
     */
    public function getPayerLastName()
    {
        return $this->container['payer_last_name'];
    }

    /**
     * Sets payer_last_name
     *
     * @param string|null $payer_last_name payer_last_name
     *
     * @return self
     */
    public function setPayerLastName($payer_last_name)
    {
        if (is_null($payer_last_name)) {
            array_push($this->openAPINullablesSetToNull, 'payer_last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payer_last_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payer_last_name'] = $payer_last_name;

        return $this;
    }

    /**
     * Gets payer_first_name
     *
     * @return string|null
     */
    public function getPayerFirstName()
    {
        return $this->container['payer_first_name'];
    }

    /**
     * Sets payer_first_name
     *
     * @param string|null $payer_first_name payer_first_name
     *
     * @return self
     */
    public function setPayerFirstName($payer_first_name)
    {
        if (is_null($payer_first_name)) {
            array_push($this->openAPINullablesSetToNull, 'payer_first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payer_first_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payer_first_name'] = $payer_first_name;

        return $this;
    }

    /**
     * Gets payer_email
     *
     * @return string|null
     */
    public function getPayerEmail()
    {
        return $this->container['payer_email'];
    }

    /**
     * Sets payer_email
     *
     * @param string|null $payer_email payer_email
     *
     * @return self
     */
    public function setPayerEmail($payer_email)
    {
        if (is_null($payer_email)) {
            array_push($this->openAPINullablesSetToNull, 'payer_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payer_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payer_email'] = $payer_email;

        return $this;
    }

    /**
     * Gets payer_siren
     *
     * @return string|null
     */
    public function getPayerSiren()
    {
        return $this->container['payer_siren'];
    }

    /**
     * Sets payer_siren
     *
     * @param string|null $payer_siren payer_siren
     *
     * @return self
     */
    public function setPayerSiren($payer_siren)
    {
        if (is_null($payer_siren)) {
            array_push($this->openAPINullablesSetToNull, 'payer_siren');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payer_siren', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payer_siren'] = $payer_siren;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


