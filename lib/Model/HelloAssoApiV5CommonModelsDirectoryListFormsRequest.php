<?php
/**
 * HelloAssoApiV5CommonModelsDirectoryListFormsRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * HelloAsso API
 *
 * HelloAsso auto-generated SDK
 *
 * The version of the OpenAPI document: public
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HelloAssoApiV5CommonModelsDirectoryListFormsRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HelloAssoApiV5CommonModelsDirectoryListFormsRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HelloAsso.Api.V5.Common.Models.Directory.ListFormsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'form_name' => 'string',
        'form_description' => 'string',
        'form_zip_codes' => 'string[]',
        'form_cities' => 'string[]',
        'form_regions' => 'string[]',
        'form_departments' => 'string[]',
        'form_countries' => 'string[]',
        'form_types' => '\OpenAPI\Client\Model\HelloAssoApiV5CommonModelsEnumsFormType[]',
        'form_activity_type' => 'string[]',
        'form_publication_start_date_min' => '\DateTime',
        'form_publication_start_date_max' => '\DateTime',
        'form_start_date_min' => '\DateTime',
        'form_start_date_max' => '\DateTime',
        'form_end_date_max' => '\DateTime',
        'form_end_date_min' => '\DateTime',
        'form_is_free' => 'bool',
        'form_has_remaining_entries' => 'bool',
        'form_internal_tags' => 'string[]',
        'form_public_tags' => 'string[]',
        'organization_name' => 'string',
        'organization_description' => 'string',
        'organization_categories' => 'string[]',
        'organization_types' => 'string[]',
        'organization_zip_codes' => 'string[]',
        'organization_cities' => 'string[]',
        'organization_regions' => 'string[]',
        'organization_departments' => 'string[]',
        'organization_fiscal_receipt_eligibility' => 'bool',
        'organization_linked_partners' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'form_name' => null,
        'form_description' => null,
        'form_zip_codes' => null,
        'form_cities' => null,
        'form_regions' => null,
        'form_departments' => null,
        'form_countries' => null,
        'form_types' => null,
        'form_activity_type' => null,
        'form_publication_start_date_min' => 'date-time',
        'form_publication_start_date_max' => 'date-time',
        'form_start_date_min' => 'date-time',
        'form_start_date_max' => 'date-time',
        'form_end_date_max' => 'date-time',
        'form_end_date_min' => 'date-time',
        'form_is_free' => null,
        'form_has_remaining_entries' => null,
        'form_internal_tags' => null,
        'form_public_tags' => null,
        'organization_name' => null,
        'organization_description' => null,
        'organization_categories' => null,
        'organization_types' => null,
        'organization_zip_codes' => null,
        'organization_cities' => null,
        'organization_regions' => null,
        'organization_departments' => null,
        'organization_fiscal_receipt_eligibility' => null,
        'organization_linked_partners' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'form_name' => true,
        'form_description' => true,
        'form_zip_codes' => true,
        'form_cities' => true,
        'form_regions' => true,
        'form_departments' => true,
        'form_countries' => true,
        'form_types' => true,
        'form_activity_type' => true,
        'form_publication_start_date_min' => true,
        'form_publication_start_date_max' => true,
        'form_start_date_min' => true,
        'form_start_date_max' => true,
        'form_end_date_max' => true,
        'form_end_date_min' => true,
        'form_is_free' => true,
        'form_has_remaining_entries' => true,
        'form_internal_tags' => true,
        'form_public_tags' => true,
        'organization_name' => true,
        'organization_description' => true,
        'organization_categories' => true,
        'organization_types' => true,
        'organization_zip_codes' => true,
        'organization_cities' => true,
        'organization_regions' => true,
        'organization_departments' => true,
        'organization_fiscal_receipt_eligibility' => true,
        'organization_linked_partners' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'form_name' => 'formName',
        'form_description' => 'formDescription',
        'form_zip_codes' => 'formZipCodes',
        'form_cities' => 'formCities',
        'form_regions' => 'formRegions',
        'form_departments' => 'formDepartments',
        'form_countries' => 'formCountries',
        'form_types' => 'formTypes',
        'form_activity_type' => 'formActivityType',
        'form_publication_start_date_min' => 'formPublicationStartDateMin',
        'form_publication_start_date_max' => 'formPublicationStartDateMax',
        'form_start_date_min' => 'formStartDateMin',
        'form_start_date_max' => 'formStartDateMax',
        'form_end_date_max' => 'formEndDateMax',
        'form_end_date_min' => 'formEndDateMin',
        'form_is_free' => 'formIsFree',
        'form_has_remaining_entries' => 'formHasRemainingEntries',
        'form_internal_tags' => 'formInternalTags',
        'form_public_tags' => 'formPublicTags',
        'organization_name' => 'organizationName',
        'organization_description' => 'organizationDescription',
        'organization_categories' => 'organizationCategories',
        'organization_types' => 'organizationTypes',
        'organization_zip_codes' => 'organizationZipCodes',
        'organization_cities' => 'organizationCities',
        'organization_regions' => 'organizationRegions',
        'organization_departments' => 'organizationDepartments',
        'organization_fiscal_receipt_eligibility' => 'organizationFiscalReceiptEligibility',
        'organization_linked_partners' => 'organizationLinkedPartners'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'form_name' => 'setFormName',
        'form_description' => 'setFormDescription',
        'form_zip_codes' => 'setFormZipCodes',
        'form_cities' => 'setFormCities',
        'form_regions' => 'setFormRegions',
        'form_departments' => 'setFormDepartments',
        'form_countries' => 'setFormCountries',
        'form_types' => 'setFormTypes',
        'form_activity_type' => 'setFormActivityType',
        'form_publication_start_date_min' => 'setFormPublicationStartDateMin',
        'form_publication_start_date_max' => 'setFormPublicationStartDateMax',
        'form_start_date_min' => 'setFormStartDateMin',
        'form_start_date_max' => 'setFormStartDateMax',
        'form_end_date_max' => 'setFormEndDateMax',
        'form_end_date_min' => 'setFormEndDateMin',
        'form_is_free' => 'setFormIsFree',
        'form_has_remaining_entries' => 'setFormHasRemainingEntries',
        'form_internal_tags' => 'setFormInternalTags',
        'form_public_tags' => 'setFormPublicTags',
        'organization_name' => 'setOrganizationName',
        'organization_description' => 'setOrganizationDescription',
        'organization_categories' => 'setOrganizationCategories',
        'organization_types' => 'setOrganizationTypes',
        'organization_zip_codes' => 'setOrganizationZipCodes',
        'organization_cities' => 'setOrganizationCities',
        'organization_regions' => 'setOrganizationRegions',
        'organization_departments' => 'setOrganizationDepartments',
        'organization_fiscal_receipt_eligibility' => 'setOrganizationFiscalReceiptEligibility',
        'organization_linked_partners' => 'setOrganizationLinkedPartners'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'form_name' => 'getFormName',
        'form_description' => 'getFormDescription',
        'form_zip_codes' => 'getFormZipCodes',
        'form_cities' => 'getFormCities',
        'form_regions' => 'getFormRegions',
        'form_departments' => 'getFormDepartments',
        'form_countries' => 'getFormCountries',
        'form_types' => 'getFormTypes',
        'form_activity_type' => 'getFormActivityType',
        'form_publication_start_date_min' => 'getFormPublicationStartDateMin',
        'form_publication_start_date_max' => 'getFormPublicationStartDateMax',
        'form_start_date_min' => 'getFormStartDateMin',
        'form_start_date_max' => 'getFormStartDateMax',
        'form_end_date_max' => 'getFormEndDateMax',
        'form_end_date_min' => 'getFormEndDateMin',
        'form_is_free' => 'getFormIsFree',
        'form_has_remaining_entries' => 'getFormHasRemainingEntries',
        'form_internal_tags' => 'getFormInternalTags',
        'form_public_tags' => 'getFormPublicTags',
        'organization_name' => 'getOrganizationName',
        'organization_description' => 'getOrganizationDescription',
        'organization_categories' => 'getOrganizationCategories',
        'organization_types' => 'getOrganizationTypes',
        'organization_zip_codes' => 'getOrganizationZipCodes',
        'organization_cities' => 'getOrganizationCities',
        'organization_regions' => 'getOrganizationRegions',
        'organization_departments' => 'getOrganizationDepartments',
        'organization_fiscal_receipt_eligibility' => 'getOrganizationFiscalReceiptEligibility',
        'organization_linked_partners' => 'getOrganizationLinkedPartners'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('form_name', $data ?? [], null);
        $this->setIfExists('form_description', $data ?? [], null);
        $this->setIfExists('form_zip_codes', $data ?? [], null);
        $this->setIfExists('form_cities', $data ?? [], null);
        $this->setIfExists('form_regions', $data ?? [], null);
        $this->setIfExists('form_departments', $data ?? [], null);
        $this->setIfExists('form_countries', $data ?? [], null);
        $this->setIfExists('form_types', $data ?? [], null);
        $this->setIfExists('form_activity_type', $data ?? [], null);
        $this->setIfExists('form_publication_start_date_min', $data ?? [], null);
        $this->setIfExists('form_publication_start_date_max', $data ?? [], null);
        $this->setIfExists('form_start_date_min', $data ?? [], null);
        $this->setIfExists('form_start_date_max', $data ?? [], null);
        $this->setIfExists('form_end_date_max', $data ?? [], null);
        $this->setIfExists('form_end_date_min', $data ?? [], null);
        $this->setIfExists('form_is_free', $data ?? [], null);
        $this->setIfExists('form_has_remaining_entries', $data ?? [], null);
        $this->setIfExists('form_internal_tags', $data ?? [], null);
        $this->setIfExists('form_public_tags', $data ?? [], null);
        $this->setIfExists('organization_name', $data ?? [], null);
        $this->setIfExists('organization_description', $data ?? [], null);
        $this->setIfExists('organization_categories', $data ?? [], null);
        $this->setIfExists('organization_types', $data ?? [], null);
        $this->setIfExists('organization_zip_codes', $data ?? [], null);
        $this->setIfExists('organization_cities', $data ?? [], null);
        $this->setIfExists('organization_regions', $data ?? [], null);
        $this->setIfExists('organization_departments', $data ?? [], null);
        $this->setIfExists('organization_fiscal_receipt_eligibility', $data ?? [], null);
        $this->setIfExists('organization_linked_partners', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets form_name
     *
     * @return string|null
     */
    public function getFormName()
    {
        return $this->container['form_name'];
    }

    /**
     * Sets form_name
     *
     * @param string|null $form_name Textual search for form name
     *
     * @return self
     */
    public function setFormName($form_name)
    {
        if (is_null($form_name)) {
            array_push($this->openAPINullablesSetToNull, 'form_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_name'] = $form_name;

        return $this;
    }

    /**
     * Gets form_description
     *
     * @return string|null
     */
    public function getFormDescription()
    {
        return $this->container['form_description'];
    }

    /**
     * Sets form_description
     *
     * @param string|null $form_description Textual search for form description
     *
     * @return self
     */
    public function setFormDescription($form_description)
    {
        if (is_null($form_description)) {
            array_push($this->openAPINullablesSetToNull, 'form_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_description'] = $form_description;

        return $this;
    }

    /**
     * Gets form_zip_codes
     *
     * @return string[]|null
     */
    public function getFormZipCodes()
    {
        return $this->container['form_zip_codes'];
    }

    /**
     * Sets form_zip_codes
     *
     * @param string[]|null $form_zip_codes The zip codes where the forms are located
     *
     * @return self
     */
    public function setFormZipCodes($form_zip_codes)
    {
        if (is_null($form_zip_codes)) {
            array_push($this->openAPINullablesSetToNull, 'form_zip_codes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_zip_codes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_zip_codes'] = $form_zip_codes;

        return $this;
    }

    /**
     * Gets form_cities
     *
     * @return string[]|null
     */
    public function getFormCities()
    {
        return $this->container['form_cities'];
    }

    /**
     * Sets form_cities
     *
     * @param string[]|null $form_cities The cities where the forms are located
     *
     * @return self
     */
    public function setFormCities($form_cities)
    {
        if (is_null($form_cities)) {
            array_push($this->openAPINullablesSetToNull, 'form_cities');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_cities', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_cities'] = $form_cities;

        return $this;
    }

    /**
     * Gets form_regions
     *
     * @return string[]|null
     */
    public function getFormRegions()
    {
        return $this->container['form_regions'];
    }

    /**
     * Sets form_regions
     *
     * @param string[]|null $form_regions The regions where the forms are located
     *
     * @return self
     */
    public function setFormRegions($form_regions)
    {
        if (is_null($form_regions)) {
            array_push($this->openAPINullablesSetToNull, 'form_regions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_regions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_regions'] = $form_regions;

        return $this;
    }

    /**
     * Gets form_departments
     *
     * @return string[]|null
     */
    public function getFormDepartments()
    {
        return $this->container['form_departments'];
    }

    /**
     * Sets form_departments
     *
     * @param string[]|null $form_departments The departments where the forms are located
     *
     * @return self
     */
    public function setFormDepartments($form_departments)
    {
        if (is_null($form_departments)) {
            array_push($this->openAPINullablesSetToNull, 'form_departments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_departments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_departments'] = $form_departments;

        return $this;
    }

    /**
     * Gets form_countries
     *
     * @return string[]|null
     */
    public function getFormCountries()
    {
        return $this->container['form_countries'];
    }

    /**
     * Sets form_countries
     *
     * @param string[]|null $form_countries The countries where the forms are located
     *
     * @return self
     */
    public function setFormCountries($form_countries)
    {
        if (is_null($form_countries)) {
            array_push($this->openAPINullablesSetToNull, 'form_countries');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_countries', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_countries'] = $form_countries;

        return $this;
    }

    /**
     * Gets form_types
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5CommonModelsEnumsFormType[]|null
     */
    public function getFormTypes()
    {
        return $this->container['form_types'];
    }

    /**
     * Sets form_types
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5CommonModelsEnumsFormType[]|null $form_types The form types : CrowdFunding, Membership, Event, Donation, PaymentForm ...
     *
     * @return self
     */
    public function setFormTypes($form_types)
    {
        if (is_null($form_types)) {
            array_push($this->openAPINullablesSetToNull, 'form_types');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_types', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_types'] = $form_types;

        return $this;
    }

    /**
     * Gets form_activity_type
     *
     * @return string[]|null
     */
    public function getFormActivityType()
    {
        return $this->container['form_activity_type'];
    }

    /**
     * Sets form_activity_type
     *
     * @param string[]|null $form_activity_type The Activity Type of the form
     *
     * @return self
     */
    public function setFormActivityType($form_activity_type)
    {
        if (is_null($form_activity_type)) {
            array_push($this->openAPINullablesSetToNull, 'form_activity_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_activity_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_activity_type'] = $form_activity_type;

        return $this;
    }

    /**
     * Gets form_publication_start_date_min
     *
     * @return \DateTime|null
     */
    public function getFormPublicationStartDateMin()
    {
        return $this->container['form_publication_start_date_min'];
    }

    /**
     * Sets form_publication_start_date_min
     *
     * @param \DateTime|null $form_publication_start_date_min The inclusive minimum publication date of the forms, format \"yyyy-MM-ddTHH:mm:ss.fffK\"
     *
     * @return self
     */
    public function setFormPublicationStartDateMin($form_publication_start_date_min)
    {
        if (is_null($form_publication_start_date_min)) {
            array_push($this->openAPINullablesSetToNull, 'form_publication_start_date_min');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_publication_start_date_min', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_publication_start_date_min'] = $form_publication_start_date_min;

        return $this;
    }

    /**
     * Gets form_publication_start_date_max
     *
     * @return \DateTime|null
     */
    public function getFormPublicationStartDateMax()
    {
        return $this->container['form_publication_start_date_max'];
    }

    /**
     * Sets form_publication_start_date_max
     *
     * @param \DateTime|null $form_publication_start_date_max The exclusive maximum publication date of the forms, format \"yyyy-MM-ddTHH:mm:ss.fffK\"
     *
     * @return self
     */
    public function setFormPublicationStartDateMax($form_publication_start_date_max)
    {
        if (is_null($form_publication_start_date_max)) {
            array_push($this->openAPINullablesSetToNull, 'form_publication_start_date_max');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_publication_start_date_max', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_publication_start_date_max'] = $form_publication_start_date_max;

        return $this;
    }

    /**
     * Gets form_start_date_min
     *
     * @return \DateTime|null
     */
    public function getFormStartDateMin()
    {
        return $this->container['form_start_date_min'];
    }

    /**
     * Sets form_start_date_min
     *
     * @param \DateTime|null $form_start_date_min The inclusive minimum start date of the forms, format \"yyyy-MM-ddTHH:mm:ss.fffK\"
     *
     * @return self
     */
    public function setFormStartDateMin($form_start_date_min)
    {
        if (is_null($form_start_date_min)) {
            array_push($this->openAPINullablesSetToNull, 'form_start_date_min');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_start_date_min', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_start_date_min'] = $form_start_date_min;

        return $this;
    }

    /**
     * Gets form_start_date_max
     *
     * @return \DateTime|null
     */
    public function getFormStartDateMax()
    {
        return $this->container['form_start_date_max'];
    }

    /**
     * Sets form_start_date_max
     *
     * @param \DateTime|null $form_start_date_max The exclusive maximum start date of the forms, format \"yyyy-MM-ddTHH:mm:ss.fffK\"
     *
     * @return self
     */
    public function setFormStartDateMax($form_start_date_max)
    {
        if (is_null($form_start_date_max)) {
            array_push($this->openAPINullablesSetToNull, 'form_start_date_max');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_start_date_max', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_start_date_max'] = $form_start_date_max;

        return $this;
    }

    /**
     * Gets form_end_date_max
     *
     * @return \DateTime|null
     */
    public function getFormEndDateMax()
    {
        return $this->container['form_end_date_max'];
    }

    /**
     * Sets form_end_date_max
     *
     * @param \DateTime|null $form_end_date_max The exclusive maximum end date of the forms, format \"yyyy-MM-ddTHH:mm:ss.fffK\"
     *
     * @return self
     */
    public function setFormEndDateMax($form_end_date_max)
    {
        if (is_null($form_end_date_max)) {
            array_push($this->openAPINullablesSetToNull, 'form_end_date_max');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_end_date_max', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_end_date_max'] = $form_end_date_max;

        return $this;
    }

    /**
     * Gets form_end_date_min
     *
     * @return \DateTime|null
     */
    public function getFormEndDateMin()
    {
        return $this->container['form_end_date_min'];
    }

    /**
     * Sets form_end_date_min
     *
     * @param \DateTime|null $form_end_date_min The inclusive minimum end date of the forms, format \"yyyy-MM-ddTHH:mm:ss.fffK\"
     *
     * @return self
     */
    public function setFormEndDateMin($form_end_date_min)
    {
        if (is_null($form_end_date_min)) {
            array_push($this->openAPINullablesSetToNull, 'form_end_date_min');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_end_date_min', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_end_date_min'] = $form_end_date_min;

        return $this;
    }

    /**
     * Gets form_is_free
     *
     * @return bool|null
     */
    public function getFormIsFree()
    {
        return $this->container['form_is_free'];
    }

    /**
     * Sets form_is_free
     *
     * @param bool|null $form_is_free Allow only free forms if true
     *
     * @return self
     */
    public function setFormIsFree($form_is_free)
    {
        if (is_null($form_is_free)) {
            array_push($this->openAPINullablesSetToNull, 'form_is_free');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_is_free', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_is_free'] = $form_is_free;

        return $this;
    }

    /**
     * Gets form_has_remaining_entries
     *
     * @return bool|null
     */
    public function getFormHasRemainingEntries()
    {
        return $this->container['form_has_remaining_entries'];
    }

    /**
     * Sets form_has_remaining_entries
     *
     * @param bool|null $form_has_remaining_entries Allow only forms with remaning entries if true
     *
     * @return self
     */
    public function setFormHasRemainingEntries($form_has_remaining_entries)
    {
        if (is_null($form_has_remaining_entries)) {
            array_push($this->openAPINullablesSetToNull, 'form_has_remaining_entries');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_has_remaining_entries', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_has_remaining_entries'] = $form_has_remaining_entries;

        return $this;
    }

    /**
     * Gets form_internal_tags
     *
     * @return string[]|null
     */
    public function getFormInternalTags()
    {
        return $this->container['form_internal_tags'];
    }

    /**
     * Sets form_internal_tags
     *
     * @param string[]|null $form_internal_tags Allow only forms with internal tags  this filter is for special operations only
     *
     * @return self
     */
    public function setFormInternalTags($form_internal_tags)
    {
        if (is_null($form_internal_tags)) {
            array_push($this->openAPINullablesSetToNull, 'form_internal_tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_internal_tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_internal_tags'] = $form_internal_tags;

        return $this;
    }

    /**
     * Gets form_public_tags
     *
     * @return string[]|null
     */
    public function getFormPublicTags()
    {
        return $this->container['form_public_tags'];
    }

    /**
     * Sets form_public_tags
     *
     * @param string[]|null $form_public_tags Allow only forms with public tags
     *
     * @return self
     */
    public function setFormPublicTags($form_public_tags)
    {
        if (is_null($form_public_tags)) {
            array_push($this->openAPINullablesSetToNull, 'form_public_tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_public_tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_public_tags'] = $form_public_tags;

        return $this;
    }

    /**
     * Gets organization_name
     *
     * @return string|null
     */
    public function getOrganizationName()
    {
        return $this->container['organization_name'];
    }

    /**
     * Sets organization_name
     *
     * @param string|null $organization_name Textual search for organization name
     *
     * @return self
     */
    public function setOrganizationName($organization_name)
    {
        if (is_null($organization_name)) {
            array_push($this->openAPINullablesSetToNull, 'organization_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organization_name'] = $organization_name;

        return $this;
    }

    /**
     * Gets organization_description
     *
     * @return string|null
     */
    public function getOrganizationDescription()
    {
        return $this->container['organization_description'];
    }

    /**
     * Sets organization_description
     *
     * @param string|null $organization_description Textual search for organization description
     *
     * @return self
     */
    public function setOrganizationDescription($organization_description)
    {
        if (is_null($organization_description)) {
            array_push($this->openAPINullablesSetToNull, 'organization_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organization_description'] = $organization_description;

        return $this;
    }

    /**
     * Gets organization_categories
     *
     * @return string[]|null
     */
    public function getOrganizationCategories()
    {
        return $this->container['organization_categories'];
    }

    /**
     * Sets organization_categories
     *
     * @param string[]|null $organization_categories The categories of the forms
     *
     * @return self
     */
    public function setOrganizationCategories($organization_categories)
    {
        if (is_null($organization_categories)) {
            array_push($this->openAPINullablesSetToNull, 'organization_categories');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_categories', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organization_categories'] = $organization_categories;

        return $this;
    }

    /**
     * Gets organization_types
     *
     * @return string[]|null
     */
    public function getOrganizationTypes()
    {
        return $this->container['organization_types'];
    }

    /**
     * Sets organization_types
     *
     * @param string[]|null $organization_types The organization types
     *
     * @return self
     */
    public function setOrganizationTypes($organization_types)
    {
        if (is_null($organization_types)) {
            array_push($this->openAPINullablesSetToNull, 'organization_types');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_types', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organization_types'] = $organization_types;

        return $this;
    }

    /**
     * Gets organization_zip_codes
     *
     * @return string[]|null
     */
    public function getOrganizationZipCodes()
    {
        return $this->container['organization_zip_codes'];
    }

    /**
     * Sets organization_zip_codes
     *
     * @param string[]|null $organization_zip_codes The zip codes where the organizations are located
     *
     * @return self
     */
    public function setOrganizationZipCodes($organization_zip_codes)
    {
        if (is_null($organization_zip_codes)) {
            array_push($this->openAPINullablesSetToNull, 'organization_zip_codes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_zip_codes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organization_zip_codes'] = $organization_zip_codes;

        return $this;
    }

    /**
     * Gets organization_cities
     *
     * @return string[]|null
     */
    public function getOrganizationCities()
    {
        return $this->container['organization_cities'];
    }

    /**
     * Sets organization_cities
     *
     * @param string[]|null $organization_cities The cities where the organizations are located
     *
     * @return self
     */
    public function setOrganizationCities($organization_cities)
    {
        if (is_null($organization_cities)) {
            array_push($this->openAPINullablesSetToNull, 'organization_cities');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_cities', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organization_cities'] = $organization_cities;

        return $this;
    }

    /**
     * Gets organization_regions
     *
     * @return string[]|null
     */
    public function getOrganizationRegions()
    {
        return $this->container['organization_regions'];
    }

    /**
     * Sets organization_regions
     *
     * @param string[]|null $organization_regions The regions where the organizations are located
     *
     * @return self
     */
    public function setOrganizationRegions($organization_regions)
    {
        if (is_null($organization_regions)) {
            array_push($this->openAPINullablesSetToNull, 'organization_regions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_regions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organization_regions'] = $organization_regions;

        return $this;
    }

    /**
     * Gets organization_departments
     *
     * @return string[]|null
     */
    public function getOrganizationDepartments()
    {
        return $this->container['organization_departments'];
    }

    /**
     * Sets organization_departments
     *
     * @param string[]|null $organization_departments The departments where the organizations are located
     *
     * @return self
     */
    public function setOrganizationDepartments($organization_departments)
    {
        if (is_null($organization_departments)) {
            array_push($this->openAPINullablesSetToNull, 'organization_departments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_departments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organization_departments'] = $organization_departments;

        return $this;
    }

    /**
     * Gets organization_fiscal_receipt_eligibility
     *
     * @return bool|null
     */
    public function getOrganizationFiscalReceiptEligibility()
    {
        return $this->container['organization_fiscal_receipt_eligibility'];
    }

    /**
     * Sets organization_fiscal_receipt_eligibility
     *
     * @param bool|null $organization_fiscal_receipt_eligibility Allow only organization with a fiscal receipt eligibility
     *
     * @return self
     */
    public function setOrganizationFiscalReceiptEligibility($organization_fiscal_receipt_eligibility)
    {
        if (is_null($organization_fiscal_receipt_eligibility)) {
            array_push($this->openAPINullablesSetToNull, 'organization_fiscal_receipt_eligibility');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_fiscal_receipt_eligibility', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organization_fiscal_receipt_eligibility'] = $organization_fiscal_receipt_eligibility;

        return $this;
    }

    /**
     * Gets organization_linked_partners
     *
     * @return string[]|null
     */
    public function getOrganizationLinkedPartners()
    {
        return $this->container['organization_linked_partners'];
    }

    /**
     * Sets organization_linked_partners
     *
     * @param string[]|null $organization_linked_partners Organization linked partners
     *
     * @return self
     */
    public function setOrganizationLinkedPartners($organization_linked_partners)
    {
        if (is_null($organization_linked_partners)) {
            array_push($this->openAPINullablesSetToNull, 'organization_linked_partners');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_linked_partners', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organization_linked_partners'] = $organization_linked_partners;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


