<?php
/**
 * HelloAssoApiV5ModelsDirectoryListOrganizationsRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * HelloAsso API
 *
 * HelloAsso auto-generated SDK
 *
 * The version of the OpenAPI document: public
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HelloAssoApiV5ModelsDirectoryListOrganizationsRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HelloAssoApiV5ModelsDirectoryListOrganizationsRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HelloAsso.Api.V5.Models.Directory.ListOrganizationsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'description' => 'string',
        'categories' => 'string[]',
        'types' => 'string[]',
        'zip_codes' => 'string[]',
        'cities' => 'string[]',
        'regions' => 'string[]',
        'departments' => 'string[]',
        'fiscal_receipt_eligibility' => 'bool',
        'internal_tags' => 'string[]',
        'tags' => 'string[]',
        'linked_partners' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'description' => null,
        'categories' => null,
        'types' => null,
        'zip_codes' => null,
        'cities' => null,
        'regions' => null,
        'departments' => null,
        'fiscal_receipt_eligibility' => null,
        'internal_tags' => null,
        'tags' => null,
        'linked_partners' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => true,
        'description' => true,
        'categories' => true,
        'types' => true,
        'zip_codes' => true,
        'cities' => true,
        'regions' => true,
        'departments' => true,
        'fiscal_receipt_eligibility' => true,
        'internal_tags' => true,
        'tags' => true,
        'linked_partners' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'categories' => 'categories',
        'types' => 'types',
        'zip_codes' => 'zipCodes',
        'cities' => 'cities',
        'regions' => 'regions',
        'departments' => 'departments',
        'fiscal_receipt_eligibility' => 'fiscalReceiptEligibility',
        'internal_tags' => 'internalTags',
        'tags' => 'tags',
        'linked_partners' => 'linkedPartners'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'categories' => 'setCategories',
        'types' => 'setTypes',
        'zip_codes' => 'setZipCodes',
        'cities' => 'setCities',
        'regions' => 'setRegions',
        'departments' => 'setDepartments',
        'fiscal_receipt_eligibility' => 'setFiscalReceiptEligibility',
        'internal_tags' => 'setInternalTags',
        'tags' => 'setTags',
        'linked_partners' => 'setLinkedPartners'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'categories' => 'getCategories',
        'types' => 'getTypes',
        'zip_codes' => 'getZipCodes',
        'cities' => 'getCities',
        'regions' => 'getRegions',
        'departments' => 'getDepartments',
        'fiscal_receipt_eligibility' => 'getFiscalReceiptEligibility',
        'internal_tags' => 'getInternalTags',
        'tags' => 'getTags',
        'linked_partners' => 'getLinkedPartners'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('categories', $data ?? [], null);
        $this->setIfExists('types', $data ?? [], null);
        $this->setIfExists('zip_codes', $data ?? [], null);
        $this->setIfExists('cities', $data ?? [], null);
        $this->setIfExists('regions', $data ?? [], null);
        $this->setIfExists('departments', $data ?? [], null);
        $this->setIfExists('fiscal_receipt_eligibility', $data ?? [], null);
        $this->setIfExists('internal_tags', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('linked_partners', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Textual search for organization name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Textual search for organization description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return string[]|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param string[]|null $categories The categories of the organizations
     *
     * @return self
     */
    public function setCategories($categories)
    {
        if (is_null($categories)) {
            array_push($this->openAPINullablesSetToNull, 'categories');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('categories', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets types
     *
     * @return string[]|null
     */
    public function getTypes()
    {
        return $this->container['types'];
    }

    /**
     * Sets types
     *
     * @param string[]|null $types The organization types
     *
     * @return self
     */
    public function setTypes($types)
    {
        if (is_null($types)) {
            array_push($this->openAPINullablesSetToNull, 'types');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('types', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['types'] = $types;

        return $this;
    }

    /**
     * Gets zip_codes
     *
     * @return string[]|null
     */
    public function getZipCodes()
    {
        return $this->container['zip_codes'];
    }

    /**
     * Sets zip_codes
     *
     * @param string[]|null $zip_codes The zip codes where the organizations are located
     *
     * @return self
     */
    public function setZipCodes($zip_codes)
    {
        if (is_null($zip_codes)) {
            array_push($this->openAPINullablesSetToNull, 'zip_codes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zip_codes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zip_codes'] = $zip_codes;

        return $this;
    }

    /**
     * Gets cities
     *
     * @return string[]|null
     */
    public function getCities()
    {
        return $this->container['cities'];
    }

    /**
     * Sets cities
     *
     * @param string[]|null $cities The cities where the organizations are located
     *
     * @return self
     */
    public function setCities($cities)
    {
        if (is_null($cities)) {
            array_push($this->openAPINullablesSetToNull, 'cities');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cities', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cities'] = $cities;

        return $this;
    }

    /**
     * Gets regions
     *
     * @return string[]|null
     */
    public function getRegions()
    {
        return $this->container['regions'];
    }

    /**
     * Sets regions
     *
     * @param string[]|null $regions The regions where the organizations are located
     *
     * @return self
     */
    public function setRegions($regions)
    {
        if (is_null($regions)) {
            array_push($this->openAPINullablesSetToNull, 'regions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('regions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['regions'] = $regions;

        return $this;
    }

    /**
     * Gets departments
     *
     * @return string[]|null
     */
    public function getDepartments()
    {
        return $this->container['departments'];
    }

    /**
     * Sets departments
     *
     * @param string[]|null $departments The departments where the organizations are located
     *
     * @return self
     */
    public function setDepartments($departments)
    {
        if (is_null($departments)) {
            array_push($this->openAPINullablesSetToNull, 'departments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('departments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['departments'] = $departments;

        return $this;
    }

    /**
     * Gets fiscal_receipt_eligibility
     *
     * @return bool|null
     */
    public function getFiscalReceiptEligibility()
    {
        return $this->container['fiscal_receipt_eligibility'];
    }

    /**
     * Sets fiscal_receipt_eligibility
     *
     * @param bool|null $fiscal_receipt_eligibility Allow only organization with a fiscal receipt eligibility
     *
     * @return self
     */
    public function setFiscalReceiptEligibility($fiscal_receipt_eligibility)
    {
        if (is_null($fiscal_receipt_eligibility)) {
            array_push($this->openAPINullablesSetToNull, 'fiscal_receipt_eligibility');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fiscal_receipt_eligibility', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fiscal_receipt_eligibility'] = $fiscal_receipt_eligibility;

        return $this;
    }

    /**
     * Gets internal_tags
     *
     * @return string[]|null
     */
    public function getInternalTags()
    {
        return $this->container['internal_tags'];
    }

    /**
     * Sets internal_tags
     *
     * @param string[]|null $internal_tags Allow only Organization with internal tags  this filter is for special operations only
     *
     * @return self
     */
    public function setInternalTags($internal_tags)
    {
        if (is_null($internal_tags)) {
            array_push($this->openAPINullablesSetToNull, 'internal_tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('internal_tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['internal_tags'] = $internal_tags;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags Allow only Organization with public tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            array_push($this->openAPINullablesSetToNull, 'tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets linked_partners
     *
     * @return string[]|null
     */
    public function getLinkedPartners()
    {
        return $this->container['linked_partners'];
    }

    /**
     * Sets linked_partners
     *
     * @param string[]|null $linked_partners Allow only Organization with linked partners
     *
     * @return self
     */
    public function setLinkedPartners($linked_partners)
    {
        if (is_null($linked_partners)) {
            array_push($this->openAPINullablesSetToNull, 'linked_partners');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('linked_partners', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['linked_partners'] = $linked_partners;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


