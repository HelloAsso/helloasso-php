<?php
/**
 * HelloAssoApiV5ModelsCartsInitCheckoutBody
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * HelloAsso API
 *
 * HelloAsso auto-generated SDK
 *
 * The version of the OpenAPI document: public
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HelloAssoApiV5ModelsCartsInitCheckoutBody Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HelloAssoApiV5ModelsCartsInitCheckoutBody implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HelloAsso.Api.V5.Models.Carts.InitCheckoutBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'total_amount' => 'int',
        'initial_amount' => 'int',
        'item_name' => 'string',
        'back_url' => 'string',
        'error_url' => 'string',
        'return_url' => 'string',
        'contains_donation' => 'bool',
        'terms' => '\OpenAPI\Client\Model\HelloAssoApiV5ModelsCartsCheckoutTerm[]',
        'payer' => '\OpenAPI\Client\Model\HelloAssoApiV5ModelsCartsCheckoutPayer',
        'metadata' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'total_amount' => 'int32',
        'initial_amount' => 'int32',
        'item_name' => null,
        'back_url' => null,
        'error_url' => null,
        'return_url' => null,
        'contains_donation' => null,
        'terms' => null,
        'payer' => null,
        'metadata' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'total_amount' => false,
        'initial_amount' => false,
        'item_name' => false,
        'back_url' => false,
        'error_url' => false,
        'return_url' => false,
        'contains_donation' => false,
        'terms' => true,
        'payer' => false,
        'metadata' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_amount' => 'totalAmount',
        'initial_amount' => 'initialAmount',
        'item_name' => 'itemName',
        'back_url' => 'backUrl',
        'error_url' => 'errorUrl',
        'return_url' => 'returnUrl',
        'contains_donation' => 'containsDonation',
        'terms' => 'terms',
        'payer' => 'payer',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_amount' => 'setTotalAmount',
        'initial_amount' => 'setInitialAmount',
        'item_name' => 'setItemName',
        'back_url' => 'setBackUrl',
        'error_url' => 'setErrorUrl',
        'return_url' => 'setReturnUrl',
        'contains_donation' => 'setContainsDonation',
        'terms' => 'setTerms',
        'payer' => 'setPayer',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_amount' => 'getTotalAmount',
        'initial_amount' => 'getInitialAmount',
        'item_name' => 'getItemName',
        'back_url' => 'getBackUrl',
        'error_url' => 'getErrorUrl',
        'return_url' => 'getReturnUrl',
        'contains_donation' => 'getContainsDonation',
        'terms' => 'getTerms',
        'payer' => 'getPayer',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('total_amount', $data ?? [], null);
        $this->setIfExists('initial_amount', $data ?? [], null);
        $this->setIfExists('item_name', $data ?? [], null);
        $this->setIfExists('back_url', $data ?? [], null);
        $this->setIfExists('error_url', $data ?? [], null);
        $this->setIfExists('return_url', $data ?? [], null);
        $this->setIfExists('contains_donation', $data ?? [], null);
        $this->setIfExists('terms', $data ?? [], null);
        $this->setIfExists('payer', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['total_amount'] === null) {
            $invalidProperties[] = "'total_amount' can't be null";
        }
        if ($this->container['initial_amount'] === null) {
            $invalidProperties[] = "'initial_amount' can't be null";
        }
        if ($this->container['item_name'] === null) {
            $invalidProperties[] = "'item_name' can't be null";
        }
        if ((mb_strlen($this->container['item_name']) > 250)) {
            $invalidProperties[] = "invalid value for 'item_name', the character length must be smaller than or equal to 250.";
        }

        if ((mb_strlen($this->container['item_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'item_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['back_url'] === null) {
            $invalidProperties[] = "'back_url' can't be null";
        }
        if ((mb_strlen($this->container['back_url']) < 1)) {
            $invalidProperties[] = "invalid value for 'back_url', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['error_url'] === null) {
            $invalidProperties[] = "'error_url' can't be null";
        }
        if ((mb_strlen($this->container['error_url']) < 1)) {
            $invalidProperties[] = "invalid value for 'error_url', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['return_url'] === null) {
            $invalidProperties[] = "'return_url' can't be null";
        }
        if ((mb_strlen($this->container['return_url']) < 1)) {
            $invalidProperties[] = "invalid value for 'return_url', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['contains_donation'] === null) {
            $invalidProperties[] = "'contains_donation' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_amount
     *
     * @return int
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param int $total_amount Total amount, all taxes included, in cents (required)  Must be equal to the sum of the initial amount and subsequent terms
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        if (is_null($total_amount)) {
            throw new \InvalidArgumentException('non-nullable total_amount cannot be null');
        }
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets initial_amount
     *
     * @return int
     */
    public function getInitialAmount()
    {
        return $this->container['initial_amount'];
    }

    /**
     * Sets initial_amount
     *
     * @param int $initial_amount The amount for the first term, all taxes included, in cents (required)
     *
     * @return self
     */
    public function setInitialAmount($initial_amount)
    {
        if (is_null($initial_amount)) {
            throw new \InvalidArgumentException('non-nullable initial_amount cannot be null');
        }
        $this->container['initial_amount'] = $initial_amount;

        return $this;
    }

    /**
     * Gets item_name
     *
     * @return string
     */
    public function getItemName()
    {
        return $this->container['item_name'];
    }

    /**
     * Sets item_name
     *
     * @param string $item_name Item name (required)  A text describing what the user paid for ('Renew license', '3 tickets', donation, etc).  Will be displayed in the near future in the user space and in the organization back office
     *
     * @return self
     */
    public function setItemName($item_name)
    {
        if (is_null($item_name)) {
            throw new \InvalidArgumentException('non-nullable item_name cannot be null');
        }
        if ((mb_strlen($item_name) > 250)) {
            throw new \InvalidArgumentException('invalid length for $item_name when calling HelloAssoApiV5ModelsCartsInitCheckoutBody., must be smaller than or equal to 250.');
        }
        if ((mb_strlen($item_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $item_name when calling HelloAssoApiV5ModelsCartsInitCheckoutBody., must be bigger than or equal to 1.');
        }

        $this->container['item_name'] = $item_name;

        return $this;
    }

    /**
     * Gets back_url
     *
     * @return string
     */
    public function getBackUrl()
    {
        return $this->container['back_url'];
    }

    /**
     * Sets back_url
     *
     * @param string $back_url Url followed by the contributor if he wants to return to its previous site
     *
     * @return self
     */
    public function setBackUrl($back_url)
    {
        if (is_null($back_url)) {
            throw new \InvalidArgumentException('non-nullable back_url cannot be null');
        }

        if ((mb_strlen($back_url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $back_url when calling HelloAssoApiV5ModelsCartsInitCheckoutBody., must be bigger than or equal to 1.');
        }

        $this->container['back_url'] = $back_url;

        return $this;
    }

    /**
     * Gets error_url
     *
     * @return string
     */
    public function getErrorUrl()
    {
        return $this->container['error_url'];
    }

    /**
     * Sets error_url
     *
     * @param string $error_url Url called in case of an error during the checkout process
     *
     * @return self
     */
    public function setErrorUrl($error_url)
    {
        if (is_null($error_url)) {
            throw new \InvalidArgumentException('non-nullable error_url cannot be null');
        }

        if ((mb_strlen($error_url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $error_url when calling HelloAssoApiV5ModelsCartsInitCheckoutBody., must be bigger than or equal to 1.');
        }

        $this->container['error_url'] = $error_url;

        return $this;
    }

    /**
     * Gets return_url
     *
     * @return string
     */
    public function getReturnUrl()
    {
        return $this->container['return_url'];
    }

    /**
     * Sets return_url
     *
     * @param string $return_url Url called after the payment
     *
     * @return self
     */
    public function setReturnUrl($return_url)
    {
        if (is_null($return_url)) {
            throw new \InvalidArgumentException('non-nullable return_url cannot be null');
        }

        if ((mb_strlen($return_url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $return_url when calling HelloAssoApiV5ModelsCartsInitCheckoutBody., must be bigger than or equal to 1.');
        }

        $this->container['return_url'] = $return_url;

        return $this;
    }

    /**
     * Gets contains_donation
     *
     * @return bool
     */
    public function getContainsDonation()
    {
        return $this->container['contains_donation'];
    }

    /**
     * Sets contains_donation
     *
     * @param bool $contains_donation The sale (or a part of) is a donation
     *
     * @return self
     */
    public function setContainsDonation($contains_donation)
    {
        if (is_null($contains_donation)) {
            throw new \InvalidArgumentException('non-nullable contains_donation cannot be null');
        }
        $this->container['contains_donation'] = $contains_donation;

        return $this;
    }

    /**
     * Gets terms
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsCartsCheckoutTerm[]|null
     */
    public function getTerms()
    {
        return $this->container['terms'];
    }

    /**
     * Sets terms
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5ModelsCartsCheckoutTerm[]|null $terms The list of future terms (if applicable)
     *
     * @return self
     */
    public function setTerms($terms)
    {
        if (is_null($terms)) {
            array_push($this->openAPINullablesSetToNull, 'terms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('terms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['terms'] = $terms;

        return $this;
    }

    /**
     * Gets payer
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsCartsCheckoutPayer|null
     */
    public function getPayer()
    {
        return $this->container['payer'];
    }

    /**
     * Sets payer
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5ModelsCartsCheckoutPayer|null $payer payer
     *
     * @return self
     */
    public function setPayer($payer)
    {
        if (is_null($payer)) {
            throw new \InvalidArgumentException('non-nullable payer cannot be null');
        }
        $this->container['payer'] = $payer;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return mixed|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param mixed|null $metadata Metadata (optional)  Json object (max length : 20000)
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


