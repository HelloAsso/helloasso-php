<?php
/**
 * HelloAssoApiV5ModelsFormsFormQuickCreateRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * HelloAsso API
 *
 * HelloAsso auto-generated SDK
 *
 * The version of the OpenAPI document: public
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HelloAssoApiV5ModelsFormsFormQuickCreateRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HelloAssoApiV5ModelsFormsFormQuickCreateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HelloAsso.Api.V5.Models.Forms.FormQuickCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'tier_list' => '\OpenAPI\Client\Model\HelloAssoApiV5ModelsFormsTierLightModel[]',
        'banner' => 'string',
        'description' => 'string',
        'end_date' => '\DateTime',
        'logo' => 'string',
        'private_title' => 'string',
        'start_date' => '\DateTime',
        'title' => 'string',
        'activity_type_id' => 'int',
        'place' => '\OpenAPI\Client\Model\HelloAssoApiV5ModelsCommonPlaceModel',
        'sale_end_date' => '\DateTime',
        'sale_start_date' => '\DateTime',
        'validity_type' => '\OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsMembershipValidityType',
        'accept_open_donation' => 'bool',
        'accept_open_monthly_donation' => 'bool',
        'allow_comment' => 'bool',
        'amount_visible' => 'bool',
        'color' => 'string',
        'widget_button_text' => 'string',
        'contact' => '\OpenAPI\Client\Model\HelloAssoApiV5ModelsCommonContactModel',
        'display_contributor_name' => 'bool',
        'display_participants_count' => 'bool',
        'display_remaining_entries' => 'bool',
        'financial_goal' => 'int',
        'generate_membership_cards' => 'bool',
        'generate_tickets' => 'bool',
        'invert_descriptions' => 'bool',
        'label_conditions_and_terms_file' => 'string',
        'long_description' => 'string',
        'open_donation_preset_amounts' => 'int[]',
        'personalized_message' => 'string',
        'project_beneficiaries' => 'string',
        'project_expenses_details' => 'string',
        'project_owners' => 'string',
        'project_target_country' => 'string',
        'allow_organism_payer' => 'bool',
        'allow_individual_payer' => 'bool',
        'max_entries' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'tier_list' => null,
        'banner' => null,
        'description' => null,
        'end_date' => 'date-time',
        'logo' => null,
        'private_title' => null,
        'start_date' => 'date-time',
        'title' => null,
        'activity_type_id' => 'int32',
        'place' => null,
        'sale_end_date' => 'date-time',
        'sale_start_date' => 'date-time',
        'validity_type' => null,
        'accept_open_donation' => null,
        'accept_open_monthly_donation' => null,
        'allow_comment' => null,
        'amount_visible' => null,
        'color' => null,
        'widget_button_text' => null,
        'contact' => null,
        'display_contributor_name' => null,
        'display_participants_count' => null,
        'display_remaining_entries' => null,
        'financial_goal' => 'int64',
        'generate_membership_cards' => null,
        'generate_tickets' => null,
        'invert_descriptions' => null,
        'label_conditions_and_terms_file' => null,
        'long_description' => null,
        'open_donation_preset_amounts' => 'int32',
        'personalized_message' => null,
        'project_beneficiaries' => null,
        'project_expenses_details' => null,
        'project_owners' => null,
        'project_target_country' => null,
        'allow_organism_payer' => null,
        'allow_individual_payer' => null,
        'max_entries' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'tier_list' => true,
        'banner' => true,
        'description' => true,
        'end_date' => true,
        'logo' => true,
        'private_title' => true,
        'start_date' => true,
        'title' => false,
        'activity_type_id' => true,
        'place' => false,
        'sale_end_date' => true,
        'sale_start_date' => true,
        'validity_type' => false,
        'accept_open_donation' => false,
        'accept_open_monthly_donation' => false,
        'allow_comment' => false,
        'amount_visible' => false,
        'color' => true,
        'widget_button_text' => true,
        'contact' => false,
        'display_contributor_name' => false,
        'display_participants_count' => false,
        'display_remaining_entries' => false,
        'financial_goal' => true,
        'generate_membership_cards' => false,
        'generate_tickets' => false,
        'invert_descriptions' => false,
        'label_conditions_and_terms_file' => true,
        'long_description' => true,
        'open_donation_preset_amounts' => true,
        'personalized_message' => true,
        'project_beneficiaries' => true,
        'project_expenses_details' => true,
        'project_owners' => true,
        'project_target_country' => true,
        'allow_organism_payer' => false,
        'allow_individual_payer' => false,
        'max_entries' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tier_list' => 'tierList',
        'banner' => 'banner',
        'description' => 'description',
        'end_date' => 'endDate',
        'logo' => 'logo',
        'private_title' => 'privateTitle',
        'start_date' => 'startDate',
        'title' => 'title',
        'activity_type_id' => 'activityTypeId',
        'place' => 'place',
        'sale_end_date' => 'saleEndDate',
        'sale_start_date' => 'saleStartDate',
        'validity_type' => 'validityType',
        'accept_open_donation' => 'acceptOpenDonation',
        'accept_open_monthly_donation' => 'acceptOpenMonthlyDonation',
        'allow_comment' => 'allowComment',
        'amount_visible' => 'amountVisible',
        'color' => 'color',
        'widget_button_text' => 'widgetButtonText',
        'contact' => 'contact',
        'display_contributor_name' => 'displayContributorName',
        'display_participants_count' => 'displayParticipantsCount',
        'display_remaining_entries' => 'displayRemainingEntries',
        'financial_goal' => 'financialGoal',
        'generate_membership_cards' => 'generateMembershipCards',
        'generate_tickets' => 'generateTickets',
        'invert_descriptions' => 'invertDescriptions',
        'label_conditions_and_terms_file' => 'labelConditionsAndTermsFile',
        'long_description' => 'longDescription',
        'open_donation_preset_amounts' => 'openDonationPresetAmounts',
        'personalized_message' => 'personalizedMessage',
        'project_beneficiaries' => 'projectBeneficiaries',
        'project_expenses_details' => 'projectExpensesDetails',
        'project_owners' => 'projectOwners',
        'project_target_country' => 'projectTargetCountry',
        'allow_organism_payer' => 'allowOrganismPayer',
        'allow_individual_payer' => 'allowIndividualPayer',
        'max_entries' => 'maxEntries'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tier_list' => 'setTierList',
        'banner' => 'setBanner',
        'description' => 'setDescription',
        'end_date' => 'setEndDate',
        'logo' => 'setLogo',
        'private_title' => 'setPrivateTitle',
        'start_date' => 'setStartDate',
        'title' => 'setTitle',
        'activity_type_id' => 'setActivityTypeId',
        'place' => 'setPlace',
        'sale_end_date' => 'setSaleEndDate',
        'sale_start_date' => 'setSaleStartDate',
        'validity_type' => 'setValidityType',
        'accept_open_donation' => 'setAcceptOpenDonation',
        'accept_open_monthly_donation' => 'setAcceptOpenMonthlyDonation',
        'allow_comment' => 'setAllowComment',
        'amount_visible' => 'setAmountVisible',
        'color' => 'setColor',
        'widget_button_text' => 'setWidgetButtonText',
        'contact' => 'setContact',
        'display_contributor_name' => 'setDisplayContributorName',
        'display_participants_count' => 'setDisplayParticipantsCount',
        'display_remaining_entries' => 'setDisplayRemainingEntries',
        'financial_goal' => 'setFinancialGoal',
        'generate_membership_cards' => 'setGenerateMembershipCards',
        'generate_tickets' => 'setGenerateTickets',
        'invert_descriptions' => 'setInvertDescriptions',
        'label_conditions_and_terms_file' => 'setLabelConditionsAndTermsFile',
        'long_description' => 'setLongDescription',
        'open_donation_preset_amounts' => 'setOpenDonationPresetAmounts',
        'personalized_message' => 'setPersonalizedMessage',
        'project_beneficiaries' => 'setProjectBeneficiaries',
        'project_expenses_details' => 'setProjectExpensesDetails',
        'project_owners' => 'setProjectOwners',
        'project_target_country' => 'setProjectTargetCountry',
        'allow_organism_payer' => 'setAllowOrganismPayer',
        'allow_individual_payer' => 'setAllowIndividualPayer',
        'max_entries' => 'setMaxEntries'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tier_list' => 'getTierList',
        'banner' => 'getBanner',
        'description' => 'getDescription',
        'end_date' => 'getEndDate',
        'logo' => 'getLogo',
        'private_title' => 'getPrivateTitle',
        'start_date' => 'getStartDate',
        'title' => 'getTitle',
        'activity_type_id' => 'getActivityTypeId',
        'place' => 'getPlace',
        'sale_end_date' => 'getSaleEndDate',
        'sale_start_date' => 'getSaleStartDate',
        'validity_type' => 'getValidityType',
        'accept_open_donation' => 'getAcceptOpenDonation',
        'accept_open_monthly_donation' => 'getAcceptOpenMonthlyDonation',
        'allow_comment' => 'getAllowComment',
        'amount_visible' => 'getAmountVisible',
        'color' => 'getColor',
        'widget_button_text' => 'getWidgetButtonText',
        'contact' => 'getContact',
        'display_contributor_name' => 'getDisplayContributorName',
        'display_participants_count' => 'getDisplayParticipantsCount',
        'display_remaining_entries' => 'getDisplayRemainingEntries',
        'financial_goal' => 'getFinancialGoal',
        'generate_membership_cards' => 'getGenerateMembershipCards',
        'generate_tickets' => 'getGenerateTickets',
        'invert_descriptions' => 'getInvertDescriptions',
        'label_conditions_and_terms_file' => 'getLabelConditionsAndTermsFile',
        'long_description' => 'getLongDescription',
        'open_donation_preset_amounts' => 'getOpenDonationPresetAmounts',
        'personalized_message' => 'getPersonalizedMessage',
        'project_beneficiaries' => 'getProjectBeneficiaries',
        'project_expenses_details' => 'getProjectExpensesDetails',
        'project_owners' => 'getProjectOwners',
        'project_target_country' => 'getProjectTargetCountry',
        'allow_organism_payer' => 'getAllowOrganismPayer',
        'allow_individual_payer' => 'getAllowIndividualPayer',
        'max_entries' => 'getMaxEntries'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('tier_list', $data ?? [], null);
        $this->setIfExists('banner', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('logo', $data ?? [], null);
        $this->setIfExists('private_title', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('activity_type_id', $data ?? [], null);
        $this->setIfExists('place', $data ?? [], null);
        $this->setIfExists('sale_end_date', $data ?? [], null);
        $this->setIfExists('sale_start_date', $data ?? [], null);
        $this->setIfExists('validity_type', $data ?? [], null);
        $this->setIfExists('accept_open_donation', $data ?? [], null);
        $this->setIfExists('accept_open_monthly_donation', $data ?? [], null);
        $this->setIfExists('allow_comment', $data ?? [], null);
        $this->setIfExists('amount_visible', $data ?? [], null);
        $this->setIfExists('color', $data ?? [], null);
        $this->setIfExists('widget_button_text', $data ?? [], null);
        $this->setIfExists('contact', $data ?? [], null);
        $this->setIfExists('display_contributor_name', $data ?? [], null);
        $this->setIfExists('display_participants_count', $data ?? [], null);
        $this->setIfExists('display_remaining_entries', $data ?? [], null);
        $this->setIfExists('financial_goal', $data ?? [], null);
        $this->setIfExists('generate_membership_cards', $data ?? [], null);
        $this->setIfExists('generate_tickets', $data ?? [], null);
        $this->setIfExists('invert_descriptions', $data ?? [], null);
        $this->setIfExists('label_conditions_and_terms_file', $data ?? [], null);
        $this->setIfExists('long_description', $data ?? [], null);
        $this->setIfExists('open_donation_preset_amounts', $data ?? [], null);
        $this->setIfExists('personalized_message', $data ?? [], null);
        $this->setIfExists('project_beneficiaries', $data ?? [], null);
        $this->setIfExists('project_expenses_details', $data ?? [], null);
        $this->setIfExists('project_owners', $data ?? [], null);
        $this->setIfExists('project_target_country', $data ?? [], null);
        $this->setIfExists('allow_organism_payer', $data ?? [], null);
        $this->setIfExists('allow_individual_payer', $data ?? [], null);
        $this->setIfExists('max_entries', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ((mb_strlen($this->container['title']) < 1)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['project_target_country']) && (mb_strlen($this->container['project_target_country']) > 3)) {
            $invalidProperties[] = "invalid value for 'project_target_country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['project_target_country']) && (mb_strlen($this->container['project_target_country']) < 3)) {
            $invalidProperties[] = "invalid value for 'project_target_country', the character length must be bigger than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tier_list
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsFormsTierLightModel[]|null
     */
    public function getTierList()
    {
        return $this->container['tier_list'];
    }

    /**
     * Sets tier_list
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5ModelsFormsTierLightModel[]|null $tier_list tier_list
     *
     * @return self
     */
    public function setTierList($tier_list)
    {
        if (is_null($tier_list)) {
            array_push($this->openAPINullablesSetToNull, 'tier_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tier_list', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tier_list'] = $tier_list;

        return $this;
    }

    /**
     * Gets banner
     *
     * @return string|null
     */
    public function getBanner()
    {
        return $this->container['banner'];
    }

    /**
     * Sets banner
     *
     * @param string|null $banner The banner of the form
     *
     * @return self
     */
    public function setBanner($banner)
    {
        if (is_null($banner)) {
            array_push($this->openAPINullablesSetToNull, 'banner');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('banner', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['banner'] = $banner;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of form
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date The datetime of the activity end
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            array_push($this->openAPINullablesSetToNull, 'end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string|null
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string|null $logo The logo of the form
     *
     * @return self
     */
    public function setLogo($logo)
    {
        if (is_null($logo)) {
            array_push($this->openAPINullablesSetToNull, 'logo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets private_title
     *
     * @return string|null
     */
    public function getPrivateTitle()
    {
        return $this->container['private_title'];
    }

    /**
     * Sets private_title
     *
     * @param string|null $private_title Private Title : displayed only in the organization back office
     *
     * @return self
     */
    public function setPrivateTitle($private_title)
    {
        if (is_null($private_title)) {
            array_push($this->openAPINullablesSetToNull, 'private_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('private_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['private_title'] = $private_title;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date The datetime of the activity start
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            array_push($this->openAPINullablesSetToNull, 'start_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('start_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The title of the form. It will be used to generate the url which that can't be changed.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }

        if ((mb_strlen($title) < 1)) {
            throw new \InvalidArgumentException('invalid length for $title when calling HelloAssoApiV5ModelsFormsFormQuickCreateRequest., must be bigger than or equal to 1.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets activity_type_id
     *
     * @return int|null
     */
    public function getActivityTypeId()
    {
        return $this->container['activity_type_id'];
    }

    /**
     * Sets activity_type_id
     *
     * @param int|null $activity_type_id Activity type identifier, matching one of the provided type values <a href=\"index#!/Values/Values_Get\"> provided here</a>
     *
     * @return self
     */
    public function setActivityTypeId($activity_type_id)
    {
        if (is_null($activity_type_id)) {
            array_push($this->openAPINullablesSetToNull, 'activity_type_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('activity_type_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['activity_type_id'] = $activity_type_id;

        return $this;
    }

    /**
     * Gets place
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsCommonPlaceModel|null
     */
    public function getPlace()
    {
        return $this->container['place'];
    }

    /**
     * Sets place
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5ModelsCommonPlaceModel|null $place place
     *
     * @return self
     */
    public function setPlace($place)
    {
        if (is_null($place)) {
            throw new \InvalidArgumentException('non-nullable place cannot be null');
        }
        $this->container['place'] = $place;

        return $this;
    }

    /**
     * Gets sale_end_date
     *
     * @return \DateTime|null
     */
    public function getSaleEndDate()
    {
        return $this->container['sale_end_date'];
    }

    /**
     * Sets sale_end_date
     *
     * @param \DateTime|null $sale_end_date The datetime (Inclusive) at which the sales end.  If null the orders will be available until the end of the campaign.
     *
     * @return self
     */
    public function setSaleEndDate($sale_end_date)
    {
        if (is_null($sale_end_date)) {
            array_push($this->openAPINullablesSetToNull, 'sale_end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sale_end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sale_end_date'] = $sale_end_date;

        return $this;
    }

    /**
     * Gets sale_start_date
     *
     * @return \DateTime|null
     */
    public function getSaleStartDate()
    {
        return $this->container['sale_start_date'];
    }

    /**
     * Sets sale_start_date
     *
     * @param \DateTime|null $sale_start_date The datetime (Inclusive) at which the users can start placing orders.  If null the orders will be available as soon as the campaign is published.
     *
     * @return self
     */
    public function setSaleStartDate($sale_start_date)
    {
        if (is_null($sale_start_date)) {
            array_push($this->openAPINullablesSetToNull, 'sale_start_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sale_start_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sale_start_date'] = $sale_start_date;

        return $this;
    }

    /**
     * Gets validity_type
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsMembershipValidityType|null
     */
    public function getValidityType()
    {
        return $this->container['validity_type'];
    }

    /**
     * Sets validity_type
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsMembershipValidityType|null $validity_type validity_type
     *
     * @return self
     */
    public function setValidityType($validity_type)
    {
        if (is_null($validity_type)) {
            throw new \InvalidArgumentException('non-nullable validity_type cannot be null');
        }
        $this->container['validity_type'] = $validity_type;

        return $this;
    }

    /**
     * Gets accept_open_donation
     *
     * @return bool|null
     */
    public function getAcceptOpenDonation()
    {
        return $this->container['accept_open_donation'];
    }

    /**
     * Sets accept_open_donation
     *
     * @param bool|null $accept_open_donation Whether the user will be allowed to make a single open donation with an order. The amount of the donation is open, but 3 presets can be set in OpenDonationPresetAmount
     *
     * @return self
     */
    public function setAcceptOpenDonation($accept_open_donation)
    {
        if (is_null($accept_open_donation)) {
            throw new \InvalidArgumentException('non-nullable accept_open_donation cannot be null');
        }
        $this->container['accept_open_donation'] = $accept_open_donation;

        return $this;
    }

    /**
     * Gets accept_open_monthly_donation
     *
     * @return bool|null
     */
    public function getAcceptOpenMonthlyDonation()
    {
        return $this->container['accept_open_monthly_donation'];
    }

    /**
     * Sets accept_open_monthly_donation
     *
     * @param bool|null $accept_open_monthly_donation Whether the user will be allowed to make a monthly open donation for donation forms
     *
     * @return self
     */
    public function setAcceptOpenMonthlyDonation($accept_open_monthly_donation)
    {
        if (is_null($accept_open_monthly_donation)) {
            throw new \InvalidArgumentException('non-nullable accept_open_monthly_donation cannot be null');
        }
        $this->container['accept_open_monthly_donation'] = $accept_open_monthly_donation;

        return $this;
    }

    /**
     * Gets allow_comment
     *
     * @return bool|null
     */
    public function getAllowComment()
    {
        return $this->container['allow_comment'];
    }

    /**
     * Sets allow_comment
     *
     * @param bool|null $allow_comment allowComment
     *
     * @return self
     */
    public function setAllowComment($allow_comment)
    {
        if (is_null($allow_comment)) {
            throw new \InvalidArgumentException('non-nullable allow_comment cannot be null');
        }
        $this->container['allow_comment'] = $allow_comment;

        return $this;
    }

    /**
     * Gets amount_visible
     *
     * @return bool|null
     */
    public function getAmountVisible()
    {
        return $this->container['amount_visible'];
    }

    /**
     * Sets amount_visible
     *
     * @param bool|null $amount_visible amountVisible
     *
     * @return self
     */
    public function setAmountVisible($amount_visible)
    {
        if (is_null($amount_visible)) {
            throw new \InvalidArgumentException('non-nullable amount_visible cannot be null');
        }
        $this->container['amount_visible'] = $amount_visible;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color The color of the form
     *
     * @return self
     */
    public function setColor($color)
    {
        if (is_null($color)) {
            array_push($this->openAPINullablesSetToNull, 'color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets widget_button_text
     *
     * @return string|null
     */
    public function getWidgetButtonText()
    {
        return $this->container['widget_button_text'];
    }

    /**
     * Sets widget_button_text
     *
     * @param string|null $widget_button_text The text displayed in the widget button
     *
     * @return self
     */
    public function setWidgetButtonText($widget_button_text)
    {
        if (is_null($widget_button_text)) {
            array_push($this->openAPINullablesSetToNull, 'widget_button_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('widget_button_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['widget_button_text'] = $widget_button_text;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsCommonContactModel|null
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5ModelsCommonContactModel|null $contact contact
     *
     * @return self
     */
    public function setContact($contact)
    {
        if (is_null($contact)) {
            throw new \InvalidArgumentException('non-nullable contact cannot be null');
        }
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets display_contributor_name
     *
     * @return bool|null
     */
    public function getDisplayContributorName()
    {
        return $this->container['display_contributor_name'];
    }

    /**
     * Sets display_contributor_name
     *
     * @param bool|null $display_contributor_name Display contributor name for fundraiser
     *
     * @return self
     */
    public function setDisplayContributorName($display_contributor_name)
    {
        if (is_null($display_contributor_name)) {
            throw new \InvalidArgumentException('non-nullable display_contributor_name cannot be null');
        }
        $this->container['display_contributor_name'] = $display_contributor_name;

        return $this;
    }

    /**
     * Gets display_participants_count
     *
     * @return bool|null
     */
    public function getDisplayParticipantsCount()
    {
        return $this->container['display_participants_count'];
    }

    /**
     * Sets display_participants_count
     *
     * @param bool|null $display_participants_count Indicates that the members count must be displayed on the form.
     *
     * @return self
     */
    public function setDisplayParticipantsCount($display_participants_count)
    {
        if (is_null($display_participants_count)) {
            throw new \InvalidArgumentException('non-nullable display_participants_count cannot be null');
        }
        $this->container['display_participants_count'] = $display_participants_count;

        return $this;
    }

    /**
     * Gets display_remaining_entries
     *
     * @return bool|null
     */
    public function getDisplayRemainingEntries()
    {
        return $this->container['display_remaining_entries'];
    }

    /**
     * Sets display_remaining_entries
     *
     * @param bool|null $display_remaining_entries Indicates that the remaining entries must be displayed on the form.
     *
     * @return self
     */
    public function setDisplayRemainingEntries($display_remaining_entries)
    {
        if (is_null($display_remaining_entries)) {
            throw new \InvalidArgumentException('non-nullable display_remaining_entries cannot be null');
        }
        $this->container['display_remaining_entries'] = $display_remaining_entries;

        return $this;
    }

    /**
     * Gets financial_goal
     *
     * @return int|null
     */
    public function getFinancialGoal()
    {
        return $this->container['financial_goal'];
    }

    /**
     * Sets financial_goal
     *
     * @param int|null $financial_goal Indicates the financial goal (amount of money raised) for the whole form. Null means no goal.
     *
     * @return self
     */
    public function setFinancialGoal($financial_goal)
    {
        if (is_null($financial_goal)) {
            array_push($this->openAPINullablesSetToNull, 'financial_goal');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('financial_goal', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['financial_goal'] = $financial_goal;

        return $this;
    }

    /**
     * Gets generate_membership_cards
     *
     * @return bool|null
     */
    public function getGenerateMembershipCards()
    {
        return $this->container['generate_membership_cards'];
    }

    /**
     * Sets generate_membership_cards
     *
     * @param bool|null $generate_membership_cards Entrust the issuance of membership cards to HelloAsso (automatically sent by email to participants)
     *
     * @return self
     */
    public function setGenerateMembershipCards($generate_membership_cards)
    {
        if (is_null($generate_membership_cards)) {
            throw new \InvalidArgumentException('non-nullable generate_membership_cards cannot be null');
        }
        $this->container['generate_membership_cards'] = $generate_membership_cards;

        return $this;
    }

    /**
     * Gets generate_tickets
     *
     * @return bool|null
     */
    public function getGenerateTickets()
    {
        return $this->container['generate_tickets'];
    }

    /**
     * Sets generate_tickets
     *
     * @param bool|null $generate_tickets Entrust the issuance of tickets to HelloAsso (automatically sent by email to participants)
     *
     * @return self
     */
    public function setGenerateTickets($generate_tickets)
    {
        if (is_null($generate_tickets)) {
            throw new \InvalidArgumentException('non-nullable generate_tickets cannot be null');
        }
        $this->container['generate_tickets'] = $generate_tickets;

        return $this;
    }

    /**
     * Gets invert_descriptions
     *
     * @return bool|null
     */
    public function getInvertDescriptions()
    {
        return $this->container['invert_descriptions'];
    }

    /**
     * Sets invert_descriptions
     *
     * @param bool|null $invert_descriptions Allows you to add the long description above the store catalog.
     *
     * @return self
     */
    public function setInvertDescriptions($invert_descriptions)
    {
        if (is_null($invert_descriptions)) {
            throw new \InvalidArgumentException('non-nullable invert_descriptions cannot be null');
        }
        $this->container['invert_descriptions'] = $invert_descriptions;

        return $this;
    }

    /**
     * Gets label_conditions_and_terms_file
     *
     * @return string|null
     */
    public function getLabelConditionsAndTermsFile()
    {
        return $this->container['label_conditions_and_terms_file'];
    }

    /**
     * Sets label_conditions_and_terms_file
     *
     * @param string|null $label_conditions_and_terms_file Label conditions and terms file
     *
     * @return self
     */
    public function setLabelConditionsAndTermsFile($label_conditions_and_terms_file)
    {
        if (is_null($label_conditions_and_terms_file)) {
            array_push($this->openAPINullablesSetToNull, 'label_conditions_and_terms_file');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('label_conditions_and_terms_file', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['label_conditions_and_terms_file'] = $label_conditions_and_terms_file;

        return $this;
    }

    /**
     * Gets long_description
     *
     * @return string|null
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     *
     * @param string|null $long_description The long description of the form (rich Html)
     *
     * @return self
     */
    public function setLongDescription($long_description)
    {
        if (is_null($long_description)) {
            array_push($this->openAPINullablesSetToNull, 'long_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('long_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets open_donation_preset_amounts
     *
     * @return int[]|null
     */
    public function getOpenDonationPresetAmounts()
    {
        return $this->container['open_donation_preset_amounts'];
    }

    /**
     * Sets open_donation_preset_amounts
     *
     * @param int[]|null $open_donation_preset_amounts The preset amounts to be shown to the user. Maximum 3 amounts.
     *
     * @return self
     */
    public function setOpenDonationPresetAmounts($open_donation_preset_amounts)
    {
        if (is_null($open_donation_preset_amounts)) {
            array_push($this->openAPINullablesSetToNull, 'open_donation_preset_amounts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('open_donation_preset_amounts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['open_donation_preset_amounts'] = $open_donation_preset_amounts;

        return $this;
    }

    /**
     * Gets personalized_message
     *
     * @return string|null
     */
    public function getPersonalizedMessage()
    {
        return $this->container['personalized_message'];
    }

    /**
     * Sets personalized_message
     *
     * @param string|null $personalized_message Personalized message for participants
     *
     * @return self
     */
    public function setPersonalizedMessage($personalized_message)
    {
        if (is_null($personalized_message)) {
            array_push($this->openAPINullablesSetToNull, 'personalized_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('personalized_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['personalized_message'] = $personalized_message;

        return $this;
    }

    /**
     * Gets project_beneficiaries
     *
     * @return string|null
     */
    public function getProjectBeneficiaries()
    {
        return $this->container['project_beneficiaries'];
    }

    /**
     * Sets project_beneficiaries
     *
     * @param string|null $project_beneficiaries The project beneficiaries of the form (rich Html)
     *
     * @return self
     */
    public function setProjectBeneficiaries($project_beneficiaries)
    {
        if (is_null($project_beneficiaries)) {
            array_push($this->openAPINullablesSetToNull, 'project_beneficiaries');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('project_beneficiaries', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['project_beneficiaries'] = $project_beneficiaries;

        return $this;
    }

    /**
     * Gets project_expenses_details
     *
     * @return string|null
     */
    public function getProjectExpensesDetails()
    {
        return $this->container['project_expenses_details'];
    }

    /**
     * Sets project_expenses_details
     *
     * @param string|null $project_expenses_details Details of the project expenses (rich Html)
     *
     * @return self
     */
    public function setProjectExpensesDetails($project_expenses_details)
    {
        if (is_null($project_expenses_details)) {
            array_push($this->openAPINullablesSetToNull, 'project_expenses_details');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('project_expenses_details', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['project_expenses_details'] = $project_expenses_details;

        return $this;
    }

    /**
     * Gets project_owners
     *
     * @return string|null
     */
    public function getProjectOwners()
    {
        return $this->container['project_owners'];
    }

    /**
     * Sets project_owners
     *
     * @param string|null $project_owners Description of the project owners (rich Html)
     *
     * @return self
     */
    public function setProjectOwners($project_owners)
    {
        if (is_null($project_owners)) {
            array_push($this->openAPINullablesSetToNull, 'project_owners');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('project_owners', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['project_owners'] = $project_owners;

        return $this;
    }

    /**
     * Gets project_target_country
     *
     * @return string|null
     */
    public function getProjectTargetCountry()
    {
        return $this->container['project_target_country'];
    }

    /**
     * Sets project_target_country
     *
     * @param string|null $project_target_country 3 letter country code
     *
     * @return self
     */
    public function setProjectTargetCountry($project_target_country)
    {
        if (is_null($project_target_country)) {
            array_push($this->openAPINullablesSetToNull, 'project_target_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('project_target_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($project_target_country) && (mb_strlen($project_target_country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $project_target_country when calling HelloAssoApiV5ModelsFormsFormQuickCreateRequest., must be smaller than or equal to 3.');
        }
        if (!is_null($project_target_country) && (mb_strlen($project_target_country) < 3)) {
            throw new \InvalidArgumentException('invalid length for $project_target_country when calling HelloAssoApiV5ModelsFormsFormQuickCreateRequest., must be bigger than or equal to 3.');
        }

        $this->container['project_target_country'] = $project_target_country;

        return $this;
    }

    /**
     * Gets allow_organism_payer
     *
     * @return bool|null
     */
    public function getAllowOrganismPayer()
    {
        return $this->container['allow_organism_payer'];
    }

    /**
     * Sets allow_organism_payer
     *
     * @param bool|null $allow_organism_payer Whether users are allowed to contribute to this form through an organism (only for donation and crowdfunding).
     *
     * @return self
     */
    public function setAllowOrganismPayer($allow_organism_payer)
    {
        if (is_null($allow_organism_payer)) {
            throw new \InvalidArgumentException('non-nullable allow_organism_payer cannot be null');
        }
        $this->container['allow_organism_payer'] = $allow_organism_payer;

        return $this;
    }

    /**
     * Gets allow_individual_payer
     *
     * @return bool|null
     */
    public function getAllowIndividualPayer()
    {
        return $this->container['allow_individual_payer'];
    }

    /**
     * Sets allow_individual_payer
     *
     * @param bool|null $allow_individual_payer Whether user are allowed to personally contribute to this form (only for donation and crowdfunding).
     *
     * @return self
     */
    public function setAllowIndividualPayer($allow_individual_payer)
    {
        if (is_null($allow_individual_payer)) {
            throw new \InvalidArgumentException('non-nullable allow_individual_payer cannot be null');
        }
        $this->container['allow_individual_payer'] = $allow_individual_payer;

        return $this;
    }

    /**
     * Gets max_entries
     *
     * @return int|null
     */
    public function getMaxEntries()
    {
        return $this->container['max_entries'];
    }

    /**
     * Sets max_entries
     *
     * @param int|null $max_entries Indicates the maximum available entries for the whole form. Null means unlimited entries.
     *
     * @return self
     */
    public function setMaxEntries($max_entries)
    {
        if (is_null($max_entries)) {
            array_push($this->openAPINullablesSetToNull, 'max_entries');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_entries', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_entries'] = $max_entries;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


