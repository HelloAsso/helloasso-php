<?php
/**
 * HelloAssoApiV5ModelsStatisticsItemDetail
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * HelloAsso API
 *
 * HelloAsso auto-generated SDK
 *
 * The version of the OpenAPI document: public
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HelloAssoApiV5ModelsStatisticsItemDetail Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HelloAssoApiV5ModelsStatisticsItemDetail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HelloAsso.Api.V5.Models.Statistics.ItemDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order' => '\OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsOrderLight',
        'payer' => '\OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsPayer',
        'payments' => '\OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsItemPayment[]',
        'name' => 'string',
        'user' => '\OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsUser',
        'price_category' => '\OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsPriceCategory',
        'min_amount' => 'int',
        'discount' => '\OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsItemDiscount',
        'custom_fields' => '\OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsItemCustomField[]',
        'options' => '\OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsItemOption[]',
        'ticket_url' => 'string',
        'qr_code' => 'string',
        'membership_card_url' => 'string',
        'day_of_levy' => 'int',
        'tier_description' => 'string',
        'tier_id' => 'int',
        'comment' => 'string',
        'id' => 'int',
        'amount' => 'int',
        'type' => '\OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsTierType',
        'initial_amount' => 'int',
        'state' => '\OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsItemState'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'order' => null,
        'payer' => null,
        'payments' => null,
        'name' => null,
        'user' => null,
        'price_category' => null,
        'min_amount' => 'int32',
        'discount' => null,
        'custom_fields' => null,
        'options' => null,
        'ticket_url' => null,
        'qr_code' => null,
        'membership_card_url' => null,
        'day_of_levy' => 'int32',
        'tier_description' => null,
        'tier_id' => 'int32',
        'comment' => null,
        'id' => 'int32',
        'amount' => 'int32',
        'type' => null,
        'initial_amount' => 'int32',
        'state' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'order' => false,
        'payer' => false,
        'payments' => true,
        'name' => true,
        'user' => false,
        'price_category' => false,
        'min_amount' => true,
        'discount' => false,
        'custom_fields' => true,
        'options' => true,
        'ticket_url' => true,
        'qr_code' => true,
        'membership_card_url' => true,
        'day_of_levy' => true,
        'tier_description' => true,
        'tier_id' => true,
        'comment' => true,
        'id' => false,
        'amount' => false,
        'type' => false,
        'initial_amount' => true,
        'state' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order' => 'order',
        'payer' => 'payer',
        'payments' => 'payments',
        'name' => 'name',
        'user' => 'user',
        'price_category' => 'priceCategory',
        'min_amount' => 'minAmount',
        'discount' => 'discount',
        'custom_fields' => 'customFields',
        'options' => 'options',
        'ticket_url' => 'ticketUrl',
        'qr_code' => 'qrCode',
        'membership_card_url' => 'membershipCardUrl',
        'day_of_levy' => 'dayOfLevy',
        'tier_description' => 'tierDescription',
        'tier_id' => 'tierId',
        'comment' => 'comment',
        'id' => 'id',
        'amount' => 'amount',
        'type' => 'type',
        'initial_amount' => 'initialAmount',
        'state' => 'state'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order' => 'setOrder',
        'payer' => 'setPayer',
        'payments' => 'setPayments',
        'name' => 'setName',
        'user' => 'setUser',
        'price_category' => 'setPriceCategory',
        'min_amount' => 'setMinAmount',
        'discount' => 'setDiscount',
        'custom_fields' => 'setCustomFields',
        'options' => 'setOptions',
        'ticket_url' => 'setTicketUrl',
        'qr_code' => 'setQrCode',
        'membership_card_url' => 'setMembershipCardUrl',
        'day_of_levy' => 'setDayOfLevy',
        'tier_description' => 'setTierDescription',
        'tier_id' => 'setTierId',
        'comment' => 'setComment',
        'id' => 'setId',
        'amount' => 'setAmount',
        'type' => 'setType',
        'initial_amount' => 'setInitialAmount',
        'state' => 'setState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order' => 'getOrder',
        'payer' => 'getPayer',
        'payments' => 'getPayments',
        'name' => 'getName',
        'user' => 'getUser',
        'price_category' => 'getPriceCategory',
        'min_amount' => 'getMinAmount',
        'discount' => 'getDiscount',
        'custom_fields' => 'getCustomFields',
        'options' => 'getOptions',
        'ticket_url' => 'getTicketUrl',
        'qr_code' => 'getQrCode',
        'membership_card_url' => 'getMembershipCardUrl',
        'day_of_levy' => 'getDayOfLevy',
        'tier_description' => 'getTierDescription',
        'tier_id' => 'getTierId',
        'comment' => 'getComment',
        'id' => 'getId',
        'amount' => 'getAmount',
        'type' => 'getType',
        'initial_amount' => 'getInitialAmount',
        'state' => 'getState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('payer', $data ?? [], null);
        $this->setIfExists('payments', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('price_category', $data ?? [], null);
        $this->setIfExists('min_amount', $data ?? [], null);
        $this->setIfExists('discount', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
        $this->setIfExists('ticket_url', $data ?? [], null);
        $this->setIfExists('qr_code', $data ?? [], null);
        $this->setIfExists('membership_card_url', $data ?? [], null);
        $this->setIfExists('day_of_levy', $data ?? [], null);
        $this->setIfExists('tier_description', $data ?? [], null);
        $this->setIfExists('tier_id', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('initial_amount', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsOrderLight|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsOrderLight|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets payer
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsPayer|null
     */
    public function getPayer()
    {
        return $this->container['payer'];
    }

    /**
     * Sets payer
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsPayer|null $payer payer
     *
     * @return self
     */
    public function setPayer($payer)
    {
        if (is_null($payer)) {
            throw new \InvalidArgumentException('non-nullable payer cannot be null');
        }
        $this->container['payer'] = $payer;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsItemPayment[]|null
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsItemPayment[]|null $payments Payments linked to this item
     *
     * @return self
     */
    public function setPayments($payments)
    {
        if (is_null($payments)) {
            array_push($this->openAPINullablesSetToNull, 'payments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsUser|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsUser|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets price_category
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsPriceCategory|null
     */
    public function getPriceCategory()
    {
        return $this->container['price_category'];
    }

    /**
     * Sets price_category
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsPriceCategory|null $price_category price_category
     *
     * @return self
     */
    public function setPriceCategory($price_category)
    {
        if (is_null($price_category)) {
            throw new \InvalidArgumentException('non-nullable price_category cannot be null');
        }
        $this->container['price_category'] = $price_category;

        return $this;
    }

    /**
     * Gets min_amount
     *
     * @return int|null
     */
    public function getMinAmount()
    {
        return $this->container['min_amount'];
    }

    /**
     * Sets min_amount
     *
     * @param int|null $min_amount Minimum amount that was specified on the tier (in cents)
     *
     * @return self
     */
    public function setMinAmount($min_amount)
    {
        if (is_null($min_amount)) {
            array_push($this->openAPINullablesSetToNull, 'min_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('min_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['min_amount'] = $min_amount;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsItemDiscount|null
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsItemDiscount|null $discount discount
     *
     * @return self
     */
    public function setDiscount($discount)
    {
        if (is_null($discount)) {
            throw new \InvalidArgumentException('non-nullable discount cannot be null');
        }
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsItemCustomField[]|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsItemCustomField[]|null $custom_fields Custom fields related to this item
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            array_push($this->openAPINullablesSetToNull, 'custom_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_fields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsItemOption[]|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsItemOption[]|null $options Extra options taken with this item
     *
     * @return self
     */
    public function setOptions($options)
    {
        if (is_null($options)) {
            array_push($this->openAPINullablesSetToNull, 'options');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('options', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets ticket_url
     *
     * @return string|null
     */
    public function getTicketUrl()
    {
        return $this->container['ticket_url'];
    }

    /**
     * Sets ticket_url
     *
     * @param string|null $ticket_url The Ticket Url
     *
     * @return self
     */
    public function setTicketUrl($ticket_url)
    {
        if (is_null($ticket_url)) {
            array_push($this->openAPINullablesSetToNull, 'ticket_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ticket_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ticket_url'] = $ticket_url;

        return $this;
    }

    /**
     * Gets qr_code
     *
     * @return string|null
     */
    public function getQrCode()
    {
        return $this->container['qr_code'];
    }

    /**
     * Sets qr_code
     *
     * @param string|null $qr_code The item QrCode (for ticket scanning only)
     *
     * @return self
     */
    public function setQrCode($qr_code)
    {
        if (is_null($qr_code)) {
            array_push($this->openAPINullablesSetToNull, 'qr_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('qr_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['qr_code'] = $qr_code;

        return $this;
    }

    /**
     * Gets membership_card_url
     *
     * @return string|null
     */
    public function getMembershipCardUrl()
    {
        return $this->container['membership_card_url'];
    }

    /**
     * Sets membership_card_url
     *
     * @param string|null $membership_card_url The Membership Card Url
     *
     * @return self
     */
    public function setMembershipCardUrl($membership_card_url)
    {
        if (is_null($membership_card_url)) {
            array_push($this->openAPINullablesSetToNull, 'membership_card_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('membership_card_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['membership_card_url'] = $membership_card_url;

        return $this;
    }

    /**
     * Gets day_of_levy
     *
     * @return int|null
     */
    public function getDayOfLevy()
    {
        return $this->container['day_of_levy'];
    }

    /**
     * Sets day_of_levy
     *
     * @param int|null $day_of_levy The day of levy for monthly donation only
     *
     * @return self
     */
    public function setDayOfLevy($day_of_levy)
    {
        if (is_null($day_of_levy)) {
            array_push($this->openAPINullablesSetToNull, 'day_of_levy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('day_of_levy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['day_of_levy'] = $day_of_levy;

        return $this;
    }

    /**
     * Gets tier_description
     *
     * @return string|null
     */
    public function getTierDescription()
    {
        return $this->container['tier_description'];
    }

    /**
     * Sets tier_description
     *
     * @param string|null $tier_description Tier description
     *
     * @return self
     */
    public function setTierDescription($tier_description)
    {
        if (is_null($tier_description)) {
            array_push($this->openAPINullablesSetToNull, 'tier_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tier_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tier_description'] = $tier_description;

        return $this;
    }

    /**
     * Gets tier_id
     *
     * @return int|null
     */
    public function getTierId()
    {
        return $this->container['tier_id'];
    }

    /**
     * Sets tier_id
     *
     * @param int|null $tier_id tier_id
     *
     * @return self
     */
    public function setTierId($tier_id)
    {
        if (is_null($tier_id)) {
            array_push($this->openAPINullablesSetToNull, 'tier_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tier_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tier_id'] = $tier_id;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            array_push($this->openAPINullablesSetToNull, 'comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id ID of the Item
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int|null $amount Total item Price in cents (after discount without extra options)
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsTierType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsTierType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets initial_amount
     *
     * @return int|null
     */
    public function getInitialAmount()
    {
        return $this->container['initial_amount'];
    }

    /**
     * Sets initial_amount
     *
     * @param int|null $initial_amount The raw amount (without reduction)
     *
     * @return self
     */
    public function setInitialAmount($initial_amount)
    {
        if (is_null($initial_amount)) {
            array_push($this->openAPINullablesSetToNull, 'initial_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('initial_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['initial_amount'] = $initial_amount;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsItemState|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsItemState|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


