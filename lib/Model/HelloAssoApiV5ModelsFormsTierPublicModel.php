<?php
/**
 * HelloAssoApiV5ModelsFormsTierPublicModel
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * HelloAsso API
 *
 * HelloAsso auto-generated SDK
 *
 * The version of the OpenAPI document: public
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HelloAssoApiV5ModelsFormsTierPublicModel Class Doc Comment
 *
 * @category Class
 * @description TierPublicModel class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HelloAssoApiV5ModelsFormsTierPublicModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HelloAsso.Api.V5.Models.Forms.TierPublicModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'custom_fields' => '\OpenAPI\Client\Model\HelloAssoApiV5ModelsFormsCustomFieldPublicModel[]',
        'extra_options' => '\OpenAPI\Client\Model\HelloAssoApiV5ModelsFormsExtraOptionPublicModel[]',
        'id' => 'int',
        'label' => 'string',
        'description' => 'string',
        'tier_type' => '\OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsTierType',
        'price' => 'int',
        'vat_rate' => 'float',
        'min_amount' => 'int',
        'payment_frequency' => '\OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsPaymentFrequencyType',
        'max_per_user' => 'int',
        'meta' => '\OpenAPI\Client\Model\HelloAssoApiV5ModelsCommonMetaModel',
        'sale_start_date' => '\DateTime',
        'sale_end_date' => '\DateTime',
        'is_eligible_tax_receipt' => 'bool',
        'terms' => '\OpenAPI\Client\Model\HelloAssoApiV5ModelsFormsTermModel[]',
        'picture' => '\OpenAPI\Client\Model\HelloAssoApiV5ModelsCommonDocumentModel',
        'is_excluded_from_form_payment_terms' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'custom_fields' => null,
        'extra_options' => null,
        'id' => 'int32',
        'label' => null,
        'description' => null,
        'tier_type' => null,
        'price' => 'int32',
        'vat_rate' => 'double',
        'min_amount' => 'int32',
        'payment_frequency' => null,
        'max_per_user' => 'int32',
        'meta' => null,
        'sale_start_date' => 'date-time',
        'sale_end_date' => 'date-time',
        'is_eligible_tax_receipt' => null,
        'terms' => null,
        'picture' => null,
        'is_excluded_from_form_payment_terms' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'custom_fields' => true,
        'extra_options' => true,
        'id' => false,
        'label' => true,
        'description' => true,
        'tier_type' => false,
        'price' => true,
        'vat_rate' => false,
        'min_amount' => true,
        'payment_frequency' => false,
        'max_per_user' => true,
        'meta' => false,
        'sale_start_date' => true,
        'sale_end_date' => true,
        'is_eligible_tax_receipt' => false,
        'terms' => true,
        'picture' => false,
        'is_excluded_from_form_payment_terms' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'custom_fields' => 'customFields',
        'extra_options' => 'extraOptions',
        'id' => 'id',
        'label' => 'label',
        'description' => 'description',
        'tier_type' => 'tierType',
        'price' => 'price',
        'vat_rate' => 'vatRate',
        'min_amount' => 'minAmount',
        'payment_frequency' => 'paymentFrequency',
        'max_per_user' => 'maxPerUser',
        'meta' => 'meta',
        'sale_start_date' => 'saleStartDate',
        'sale_end_date' => 'saleEndDate',
        'is_eligible_tax_receipt' => 'isEligibleTaxReceipt',
        'terms' => 'terms',
        'picture' => 'picture',
        'is_excluded_from_form_payment_terms' => 'isExcludedFromFormPaymentTerms'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'custom_fields' => 'setCustomFields',
        'extra_options' => 'setExtraOptions',
        'id' => 'setId',
        'label' => 'setLabel',
        'description' => 'setDescription',
        'tier_type' => 'setTierType',
        'price' => 'setPrice',
        'vat_rate' => 'setVatRate',
        'min_amount' => 'setMinAmount',
        'payment_frequency' => 'setPaymentFrequency',
        'max_per_user' => 'setMaxPerUser',
        'meta' => 'setMeta',
        'sale_start_date' => 'setSaleStartDate',
        'sale_end_date' => 'setSaleEndDate',
        'is_eligible_tax_receipt' => 'setIsEligibleTaxReceipt',
        'terms' => 'setTerms',
        'picture' => 'setPicture',
        'is_excluded_from_form_payment_terms' => 'setIsExcludedFromFormPaymentTerms'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'custom_fields' => 'getCustomFields',
        'extra_options' => 'getExtraOptions',
        'id' => 'getId',
        'label' => 'getLabel',
        'description' => 'getDescription',
        'tier_type' => 'getTierType',
        'price' => 'getPrice',
        'vat_rate' => 'getVatRate',
        'min_amount' => 'getMinAmount',
        'payment_frequency' => 'getPaymentFrequency',
        'max_per_user' => 'getMaxPerUser',
        'meta' => 'getMeta',
        'sale_start_date' => 'getSaleStartDate',
        'sale_end_date' => 'getSaleEndDate',
        'is_eligible_tax_receipt' => 'getIsEligibleTaxReceipt',
        'terms' => 'getTerms',
        'picture' => 'getPicture',
        'is_excluded_from_form_payment_terms' => 'getIsExcludedFromFormPaymentTerms'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('extra_options', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('tier_type', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('vat_rate', $data ?? [], null);
        $this->setIfExists('min_amount', $data ?? [], null);
        $this->setIfExists('payment_frequency', $data ?? [], null);
        $this->setIfExists('max_per_user', $data ?? [], null);
        $this->setIfExists('meta', $data ?? [], null);
        $this->setIfExists('sale_start_date', $data ?? [], null);
        $this->setIfExists('sale_end_date', $data ?? [], null);
        $this->setIfExists('is_eligible_tax_receipt', $data ?? [], null);
        $this->setIfExists('terms', $data ?? [], null);
        $this->setIfExists('picture', $data ?? [], null);
        $this->setIfExists('is_excluded_from_form_payment_terms', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets custom_fields
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsFormsCustomFieldPublicModel[]|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5ModelsFormsCustomFieldPublicModel[]|null $custom_fields List of custom fields to be filled by the user
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            array_push($this->openAPINullablesSetToNull, 'custom_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_fields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets extra_options
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsFormsExtraOptionPublicModel[]|null
     */
    public function getExtraOptions()
    {
        return $this->container['extra_options'];
    }

    /**
     * Sets extra_options
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5ModelsFormsExtraOptionPublicModel[]|null $extra_options List of available extra options to buy along the tier
     *
     * @return self
     */
    public function setExtraOptions($extra_options)
    {
        if (is_null($extra_options)) {
            array_push($this->openAPINullablesSetToNull, 'extra_options');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('extra_options', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['extra_options'] = $extra_options;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            array_push($this->openAPINullablesSetToNull, 'label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets tier_type
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsTierType|null
     */
    public function getTierType()
    {
        return $this->container['tier_type'];
    }

    /**
     * Sets tier_type
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsTierType|null $tier_type tier_type
     *
     * @return self
     */
    public function setTierType($tier_type)
    {
        if (is_null($tier_type)) {
            throw new \InvalidArgumentException('non-nullable tier_type cannot be null');
        }
        $this->container['tier_type'] = $tier_type;

        return $this;
    }

    /**
     * Gets price
     *
     * @return int|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param int|null $price the Price in cents  if price equals 0 then it is free or there is a MinAmount
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            array_push($this->openAPINullablesSetToNull, 'price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets vat_rate
     *
     * @return float|null
     */
    public function getVatRate()
    {
        return $this->container['vat_rate'];
    }

    /**
     * Sets vat_rate
     *
     * @param float|null $vat_rate Vat rate if applicable  Amount have to be 0.10 for 10%
     *
     * @return self
     */
    public function setVatRate($vat_rate)
    {
        if (is_null($vat_rate)) {
            throw new \InvalidArgumentException('non-nullable vat_rate cannot be null');
        }
        $this->container['vat_rate'] = $vat_rate;

        return $this;
    }

    /**
     * Gets min_amount
     *
     * @return int|null
     */
    public function getMinAmount()
    {
        return $this->container['min_amount'];
    }

    /**
     * Sets min_amount
     *
     * @param int|null $min_amount If set, it means the payment is free to choose, according to the specified minAmount in cents
     *
     * @return self
     */
    public function setMinAmount($min_amount)
    {
        if (is_null($min_amount)) {
            array_push($this->openAPINullablesSetToNull, 'min_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('min_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['min_amount'] = $min_amount;

        return $this;
    }

    /**
     * Gets payment_frequency
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsPaymentFrequencyType|null
     */
    public function getPaymentFrequency()
    {
        return $this->container['payment_frequency'];
    }

    /**
     * Sets payment_frequency
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsPaymentFrequencyType|null $payment_frequency payment_frequency
     *
     * @return self
     */
    public function setPaymentFrequency($payment_frequency)
    {
        if (is_null($payment_frequency)) {
            throw new \InvalidArgumentException('non-nullable payment_frequency cannot be null');
        }
        $this->container['payment_frequency'] = $payment_frequency;

        return $this;
    }

    /**
     * Gets max_per_user
     *
     * @return int|null
     */
    public function getMaxPerUser()
    {
        return $this->container['max_per_user'];
    }

    /**
     * Sets max_per_user
     *
     * @param int|null $max_per_user Max quantity buyable in this cart
     *
     * @return self
     */
    public function setMaxPerUser($max_per_user)
    {
        if (is_null($max_per_user)) {
            array_push($this->openAPINullablesSetToNull, 'max_per_user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_per_user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_per_user'] = $max_per_user;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsCommonMetaModel|null
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5ModelsCommonMetaModel|null $meta meta
     *
     * @return self
     */
    public function setMeta($meta)
    {
        if (is_null($meta)) {
            throw new \InvalidArgumentException('non-nullable meta cannot be null');
        }
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets sale_start_date
     *
     * @return \DateTime|null
     */
    public function getSaleStartDate()
    {
        return $this->container['sale_start_date'];
    }

    /**
     * Sets sale_start_date
     *
     * @param \DateTime|null $sale_start_date The datetime (Inclusive) at which the users can start buying this tier.  If null the tier will be available at the start of the event.
     *
     * @return self
     */
    public function setSaleStartDate($sale_start_date)
    {
        if (is_null($sale_start_date)) {
            array_push($this->openAPINullablesSetToNull, 'sale_start_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sale_start_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sale_start_date'] = $sale_start_date;

        return $this;
    }

    /**
     * Gets sale_end_date
     *
     * @return \DateTime|null
     */
    public function getSaleEndDate()
    {
        return $this->container['sale_end_date'];
    }

    /**
     * Sets sale_end_date
     *
     * @param \DateTime|null $sale_end_date The datetime (Inclusive) at which the tier is no longer available.  If null the tier will be available until the end of the event.
     *
     * @return self
     */
    public function setSaleEndDate($sale_end_date)
    {
        if (is_null($sale_end_date)) {
            array_push($this->openAPINullablesSetToNull, 'sale_end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sale_end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sale_end_date'] = $sale_end_date;

        return $this;
    }

    /**
     * Gets is_eligible_tax_receipt
     *
     * @return bool|null
     */
    public function getIsEligibleTaxReceipt()
    {
        return $this->container['is_eligible_tax_receipt'];
    }

    /**
     * Sets is_eligible_tax_receipt
     *
     * @param bool|null $is_eligible_tax_receipt Whether this is eligible to a deduction
     *
     * @return self
     */
    public function setIsEligibleTaxReceipt($is_eligible_tax_receipt)
    {
        if (is_null($is_eligible_tax_receipt)) {
            throw new \InvalidArgumentException('non-nullable is_eligible_tax_receipt cannot be null');
        }
        $this->container['is_eligible_tax_receipt'] = $is_eligible_tax_receipt;

        return $this;
    }

    /**
     * Gets terms
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsFormsTermModel[]|null
     */
    public function getTerms()
    {
        return $this->container['terms'];
    }

    /**
     * Sets terms
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5ModelsFormsTermModel[]|null $terms Terms of tier
     *
     * @return self
     */
    public function setTerms($terms)
    {
        if (is_null($terms)) {
            array_push($this->openAPINullablesSetToNull, 'terms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('terms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['terms'] = $terms;

        return $this;
    }

    /**
     * Gets picture
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsCommonDocumentModel|null
     */
    public function getPicture()
    {
        return $this->container['picture'];
    }

    /**
     * Sets picture
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5ModelsCommonDocumentModel|null $picture picture
     *
     * @return self
     */
    public function setPicture($picture)
    {
        if (is_null($picture)) {
            throw new \InvalidArgumentException('non-nullable picture cannot be null');
        }
        $this->container['picture'] = $picture;

        return $this;
    }

    /**
     * Gets is_excluded_from_form_payment_terms
     *
     * @return bool|null
     */
    public function getIsExcludedFromFormPaymentTerms()
    {
        return $this->container['is_excluded_from_form_payment_terms'];
    }

    /**
     * Sets is_excluded_from_form_payment_terms
     *
     * @param bool|null $is_excluded_from_form_payment_terms True means this tier must be paid in the initial payment, false means it can be paid in payment with installments  Null when the form payment terms are disabled or not compatible with the related form
     *
     * @return self
     */
    public function setIsExcludedFromFormPaymentTerms($is_excluded_from_form_payment_terms)
    {
        if (is_null($is_excluded_from_form_payment_terms)) {
            array_push($this->openAPINullablesSetToNull, 'is_excluded_from_form_payment_terms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_excluded_from_form_payment_terms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_excluded_from_form_payment_terms'] = $is_excluded_from_form_payment_terms;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


