<?php
/**
 * HelloAssoApiV5CommonModelsStatisticsOrderPayment
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * HelloAsso API
 *
 * HelloAsso auto-generated SDK
 *
 * The version of the OpenAPI document: public
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HelloAssoApiV5CommonModelsStatisticsOrderPayment Class Doc Comment
 *
 * @category Class
 * @description Payment on the order
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HelloAssoApiV5CommonModelsStatisticsOrderPayment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HelloAsso.Api.V5.Common.Models.Statistics.OrderPayment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'items' => '\OpenAPI\Client\Model\HelloAssoApiV5CommonModelsStatisticsShareItem[]',
        'cash_out_date' => '\DateTime',
        'id_cash_out' => 'int',
        'cash_out_state' => '\OpenAPI\Client\Model\HelloAssoApiV5CommonModelsEnumsPaymentCashOutState',
        'payment_receipt_url' => 'string',
        'fiscal_receipt_url' => 'string',
        'id' => 'int',
        'amount' => 'int',
        'amount_tip' => 'int',
        'date' => '\DateTime',
        'payment_means' => '\OpenAPI\Client\Model\HelloAssoApiV5CommonModelsEnumsPaymentMeans',
        'installment_number' => 'int',
        'state' => '\OpenAPI\Client\Model\HelloAssoApiV5CommonModelsEnumsPaymentState',
        'type' => '\OpenAPI\Client\Model\HelloAssoApiV5CommonModelsEnumsPaymentType',
        'meta' => '\OpenAPI\Client\Model\HelloAssoApiV5CommonModelsCommonMetaModel',
        'payment_off_line_mean' => '\OpenAPI\Client\Model\HelloAssoApiV5CommonModelsEnumsPaymentMeans',
        'refund_operations' => '\OpenAPI\Client\Model\HelloAssoApiV5CommonModelsStatisticsRefundOperationLightModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'items' => null,
        'cash_out_date' => 'date-time',
        'id_cash_out' => 'int32',
        'cash_out_state' => null,
        'payment_receipt_url' => null,
        'fiscal_receipt_url' => null,
        'id' => 'int32',
        'amount' => 'int32',
        'amount_tip' => 'int32',
        'date' => 'date-time',
        'payment_means' => null,
        'installment_number' => 'int32',
        'state' => null,
        'type' => null,
        'meta' => null,
        'payment_off_line_mean' => null,
        'refund_operations' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'items' => true,
        'cash_out_date' => true,
        'id_cash_out' => true,
        'cash_out_state' => false,
        'payment_receipt_url' => true,
        'fiscal_receipt_url' => true,
        'id' => false,
        'amount' => false,
        'amount_tip' => true,
        'date' => false,
        'payment_means' => false,
        'installment_number' => true,
        'state' => false,
        'type' => false,
        'meta' => false,
        'payment_off_line_mean' => false,
        'refund_operations' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'items' => 'items',
        'cash_out_date' => 'cashOutDate',
        'id_cash_out' => 'idCashOut',
        'cash_out_state' => 'cashOutState',
        'payment_receipt_url' => 'paymentReceiptUrl',
        'fiscal_receipt_url' => 'fiscalReceiptUrl',
        'id' => 'id',
        'amount' => 'amount',
        'amount_tip' => 'amountTip',
        'date' => 'date',
        'payment_means' => 'paymentMeans',
        'installment_number' => 'installmentNumber',
        'state' => 'state',
        'type' => 'type',
        'meta' => 'meta',
        'payment_off_line_mean' => 'paymentOffLineMean',
        'refund_operations' => 'refundOperations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'items' => 'setItems',
        'cash_out_date' => 'setCashOutDate',
        'id_cash_out' => 'setIdCashOut',
        'cash_out_state' => 'setCashOutState',
        'payment_receipt_url' => 'setPaymentReceiptUrl',
        'fiscal_receipt_url' => 'setFiscalReceiptUrl',
        'id' => 'setId',
        'amount' => 'setAmount',
        'amount_tip' => 'setAmountTip',
        'date' => 'setDate',
        'payment_means' => 'setPaymentMeans',
        'installment_number' => 'setInstallmentNumber',
        'state' => 'setState',
        'type' => 'setType',
        'meta' => 'setMeta',
        'payment_off_line_mean' => 'setPaymentOffLineMean',
        'refund_operations' => 'setRefundOperations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'items' => 'getItems',
        'cash_out_date' => 'getCashOutDate',
        'id_cash_out' => 'getIdCashOut',
        'cash_out_state' => 'getCashOutState',
        'payment_receipt_url' => 'getPaymentReceiptUrl',
        'fiscal_receipt_url' => 'getFiscalReceiptUrl',
        'id' => 'getId',
        'amount' => 'getAmount',
        'amount_tip' => 'getAmountTip',
        'date' => 'getDate',
        'payment_means' => 'getPaymentMeans',
        'installment_number' => 'getInstallmentNumber',
        'state' => 'getState',
        'type' => 'getType',
        'meta' => 'getMeta',
        'payment_off_line_mean' => 'getPaymentOffLineMean',
        'refund_operations' => 'getRefundOperations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('cash_out_date', $data ?? [], null);
        $this->setIfExists('id_cash_out', $data ?? [], null);
        $this->setIfExists('cash_out_state', $data ?? [], null);
        $this->setIfExists('payment_receipt_url', $data ?? [], null);
        $this->setIfExists('fiscal_receipt_url', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('amount_tip', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('payment_means', $data ?? [], null);
        $this->setIfExists('installment_number', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('meta', $data ?? [], null);
        $this->setIfExists('payment_off_line_mean', $data ?? [], null);
        $this->setIfExists('refund_operations', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets items
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5CommonModelsStatisticsShareItem[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5CommonModelsStatisticsShareItem[]|null $items Items linked to this payment and each share between the item and the payment
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            array_push($this->openAPINullablesSetToNull, 'items');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('items', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets cash_out_date
     *
     * @return \DateTime|null
     */
    public function getCashOutDate()
    {
        return $this->container['cash_out_date'];
    }

    /**
     * Sets cash_out_date
     *
     * @param \DateTime|null $cash_out_date The date of the cash out
     *
     * @return self
     */
    public function setCashOutDate($cash_out_date)
    {
        if (is_null($cash_out_date)) {
            array_push($this->openAPINullablesSetToNull, 'cash_out_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cash_out_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cash_out_date'] = $cash_out_date;

        return $this;
    }

    /**
     * Gets id_cash_out
     *
     * @return int|null
     */
    public function getIdCashOut()
    {
        return $this->container['id_cash_out'];
    }

    /**
     * Sets id_cash_out
     *
     * @param int|null $id_cash_out The id of the cash out
     *
     * @return self
     */
    public function setIdCashOut($id_cash_out)
    {
        if (is_null($id_cash_out)) {
            array_push($this->openAPINullablesSetToNull, 'id_cash_out');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id_cash_out', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id_cash_out'] = $id_cash_out;

        return $this;
    }

    /**
     * Gets cash_out_state
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5CommonModelsEnumsPaymentCashOutState|null
     */
    public function getCashOutState()
    {
        return $this->container['cash_out_state'];
    }

    /**
     * Sets cash_out_state
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5CommonModelsEnumsPaymentCashOutState|null $cash_out_state cash_out_state
     *
     * @return self
     */
    public function setCashOutState($cash_out_state)
    {
        if (is_null($cash_out_state)) {
            throw new \InvalidArgumentException('non-nullable cash_out_state cannot be null');
        }
        $this->container['cash_out_state'] = $cash_out_state;

        return $this;
    }

    /**
     * Gets payment_receipt_url
     *
     * @return string|null
     */
    public function getPaymentReceiptUrl()
    {
        return $this->container['payment_receipt_url'];
    }

    /**
     * Sets payment_receipt_url
     *
     * @param string|null $payment_receipt_url The Payment Receipt Url
     *
     * @return self
     */
    public function setPaymentReceiptUrl($payment_receipt_url)
    {
        if (is_null($payment_receipt_url)) {
            array_push($this->openAPINullablesSetToNull, 'payment_receipt_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_receipt_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_receipt_url'] = $payment_receipt_url;

        return $this;
    }

    /**
     * Gets fiscal_receipt_url
     *
     * @return string|null
     */
    public function getFiscalReceiptUrl()
    {
        return $this->container['fiscal_receipt_url'];
    }

    /**
     * Sets fiscal_receipt_url
     *
     * @param string|null $fiscal_receipt_url The Fiscal Receipt Url
     *
     * @return self
     */
    public function setFiscalReceiptUrl($fiscal_receipt_url)
    {
        if (is_null($fiscal_receipt_url)) {
            array_push($this->openAPINullablesSetToNull, 'fiscal_receipt_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fiscal_receipt_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fiscal_receipt_url'] = $fiscal_receipt_url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the payment
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int|null $amount Total Amount of the payment (in cents)
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_tip
     *
     * @return int|null
     */
    public function getAmountTip()
    {
        return $this->container['amount_tip'];
    }

    /**
     * Sets amount_tip
     *
     * @param int|null $amount_tip Tip Amount of the payment (in cents)
     *
     * @return self
     */
    public function setAmountTip($amount_tip)
    {
        if (is_null($amount_tip)) {
            array_push($this->openAPINullablesSetToNull, 'amount_tip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('amount_tip', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['amount_tip'] = $amount_tip;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date Date of the payment
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets payment_means
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5CommonModelsEnumsPaymentMeans|null
     */
    public function getPaymentMeans()
    {
        return $this->container['payment_means'];
    }

    /**
     * Sets payment_means
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5CommonModelsEnumsPaymentMeans|null $payment_means payment_means
     *
     * @return self
     */
    public function setPaymentMeans($payment_means)
    {
        if (is_null($payment_means)) {
            throw new \InvalidArgumentException('non-nullable payment_means cannot be null');
        }
        $this->container['payment_means'] = $payment_means;

        return $this;
    }

    /**
     * Gets installment_number
     *
     * @return int|null
     */
    public function getInstallmentNumber()
    {
        return $this->container['installment_number'];
    }

    /**
     * Sets installment_number
     *
     * @param int|null $installment_number Indicates the payment number (useful in the case of an order comprising payments with installments)
     *
     * @return self
     */
    public function setInstallmentNumber($installment_number)
    {
        if (is_null($installment_number)) {
            array_push($this->openAPINullablesSetToNull, 'installment_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('installment_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['installment_number'] = $installment_number;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5CommonModelsEnumsPaymentState|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5CommonModelsEnumsPaymentState|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5CommonModelsEnumsPaymentType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5CommonModelsEnumsPaymentType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5CommonModelsCommonMetaModel|null
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5CommonModelsCommonMetaModel|null $meta meta
     *
     * @return self
     */
    public function setMeta($meta)
    {
        if (is_null($meta)) {
            throw new \InvalidArgumentException('non-nullable meta cannot be null');
        }
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets payment_off_line_mean
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5CommonModelsEnumsPaymentMeans|null
     */
    public function getPaymentOffLineMean()
    {
        return $this->container['payment_off_line_mean'];
    }

    /**
     * Sets payment_off_line_mean
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5CommonModelsEnumsPaymentMeans|null $payment_off_line_mean payment_off_line_mean
     *
     * @return self
     */
    public function setPaymentOffLineMean($payment_off_line_mean)
    {
        if (is_null($payment_off_line_mean)) {
            throw new \InvalidArgumentException('non-nullable payment_off_line_mean cannot be null');
        }
        $this->container['payment_off_line_mean'] = $payment_off_line_mean;

        return $this;
    }

    /**
     * Gets refund_operations
     *
     * @return \OpenAPI\Client\Model\HelloAssoApiV5CommonModelsStatisticsRefundOperationLightModel[]|null
     */
    public function getRefundOperations()
    {
        return $this->container['refund_operations'];
    }

    /**
     * Sets refund_operations
     *
     * @param \OpenAPI\Client\Model\HelloAssoApiV5CommonModelsStatisticsRefundOperationLightModel[]|null $refund_operations The refund operations information for the specific payment.
     *
     * @return self
     */
    public function setRefundOperations($refund_operations)
    {
        if (is_null($refund_operations)) {
            array_push($this->openAPINullablesSetToNull, 'refund_operations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('refund_operations', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['refund_operations'] = $refund_operations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


