<?php
/**
 * PaiementsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * HelloAsso API
 *
 * HelloAsso auto-generated SDK
 *
 * The version of the OpenAPI document: public
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * PaiementsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaiementsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGet' => [
            'application/json',
        ],
        'organizationsOrganizationSlugPaymentsGet' => [
            'application/json',
        ],
        'organizationsOrganizationSlugPaymentsSearchGet' => [
            'application/json',
        ],
        'paymentsPaymentIdGet' => [
            'application/json',
        ],
        'paymentsPaymentIdRefundPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGet
     *
     * Obtenir les informations des paiements effectués sur un formulaire
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  string $form_slug The form slug (required)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType $form_type The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsPaymentState[]|null $states Filter results by states of payments  Available values: * &#x60;Pending&#x60; - A payment scheduled at a later date, not yet processed. * &#x60;Authorized&#x60; - The payment has been authorized, validated, processed. * &#x60;Refused&#x60; - The payment has been refused by the bank. * &#x60;Unknown&#x60; * &#x60;Registered&#x60; - Represents a payment made offline.              Probably for an item of type * &#x60;Refunded&#x60; - The payment has been refunded. * &#x60;Refunding&#x60; - The payment is being refunded. * &#x60;Contested&#x60; - Payment has been contested by the contributor (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort payments by ascending or descending order. Default is descending (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortField|null $sort_field Sort payments by a specific field (Date or UpdateDate). Default is date (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ResultsWithPaginationModelPayment
     */
    public function organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGet($organization_slug, $form_slug, $form_type, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $states = null, $sort_order = null, $sort_field = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGet'][0])
    {
        list($response) = $this->organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGetWithHttpInfo($organization_slug, $form_slug, $form_type, $from, $to, $user_search_key, $page_index, $page_size, $continuation_token, $states, $sort_order, $sort_field, $with_count, $contentType);
        return $response;
    }

    /**
     * Operation organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGetWithHttpInfo
     *
     * Obtenir les informations des paiements effectués sur un formulaire
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  string $form_slug The form slug (required)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType $form_type The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsPaymentState[]|null $states Filter results by states of payments  Available values: * &#x60;Pending&#x60; - A payment scheduled at a later date, not yet processed. * &#x60;Authorized&#x60; - The payment has been authorized, validated, processed. * &#x60;Refused&#x60; - The payment has been refused by the bank. * &#x60;Unknown&#x60; * &#x60;Registered&#x60; - Represents a payment made offline.              Probably for an item of type * &#x60;Refunded&#x60; - The payment has been refunded. * &#x60;Refunding&#x60; - The payment is being refunded. * &#x60;Contested&#x60; - Payment has been contested by the contributor (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort payments by ascending or descending order. Default is descending (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortField|null $sort_field Sort payments by a specific field (Date or UpdateDate). Default is date (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ResultsWithPaginationModelPayment, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGetWithHttpInfo($organization_slug, $form_slug, $form_type, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $states = null, $sort_order = null, $sort_field = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGet'][0])
    {
        $request = $this->organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGetRequest($organization_slug, $form_slug, $form_type, $from, $to, $user_search_key, $page_index, $page_size, $continuation_token, $states, $sort_order, $sort_field, $with_count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ResultsWithPaginationModelPayment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ResultsWithPaginationModelPayment' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ResultsWithPaginationModelPayment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ResultsWithPaginationModelPayment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResultsWithPaginationModelPayment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGetAsync
     *
     * Obtenir les informations des paiements effectués sur un formulaire
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  string $form_slug The form slug (required)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType $form_type The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsPaymentState[]|null $states Filter results by states of payments  Available values: * &#x60;Pending&#x60; - A payment scheduled at a later date, not yet processed. * &#x60;Authorized&#x60; - The payment has been authorized, validated, processed. * &#x60;Refused&#x60; - The payment has been refused by the bank. * &#x60;Unknown&#x60; * &#x60;Registered&#x60; - Represents a payment made offline.              Probably for an item of type * &#x60;Refunded&#x60; - The payment has been refunded. * &#x60;Refunding&#x60; - The payment is being refunded. * &#x60;Contested&#x60; - Payment has been contested by the contributor (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort payments by ascending or descending order. Default is descending (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortField|null $sort_field Sort payments by a specific field (Date or UpdateDate). Default is date (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGetAsync($organization_slug, $form_slug, $form_type, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $states = null, $sort_order = null, $sort_field = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGet'][0])
    {
        return $this->organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGetAsyncWithHttpInfo($organization_slug, $form_slug, $form_type, $from, $to, $user_search_key, $page_index, $page_size, $continuation_token, $states, $sort_order, $sort_field, $with_count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGetAsyncWithHttpInfo
     *
     * Obtenir les informations des paiements effectués sur un formulaire
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  string $form_slug The form slug (required)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType $form_type The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsPaymentState[]|null $states Filter results by states of payments  Available values: * &#x60;Pending&#x60; - A payment scheduled at a later date, not yet processed. * &#x60;Authorized&#x60; - The payment has been authorized, validated, processed. * &#x60;Refused&#x60; - The payment has been refused by the bank. * &#x60;Unknown&#x60; * &#x60;Registered&#x60; - Represents a payment made offline.              Probably for an item of type * &#x60;Refunded&#x60; - The payment has been refunded. * &#x60;Refunding&#x60; - The payment is being refunded. * &#x60;Contested&#x60; - Payment has been contested by the contributor (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort payments by ascending or descending order. Default is descending (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortField|null $sort_field Sort payments by a specific field (Date or UpdateDate). Default is date (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGetAsyncWithHttpInfo($organization_slug, $form_slug, $form_type, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $states = null, $sort_order = null, $sort_field = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ResultsWithPaginationModelPayment';
        $request = $this->organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGetRequest($organization_slug, $form_slug, $form_type, $from, $to, $user_search_key, $page_index, $page_size, $continuation_token, $states, $sort_order, $sort_field, $with_count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGet'
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  string $form_slug The form slug (required)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType $form_type The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsPaymentState[]|null $states Filter results by states of payments  Available values: * &#x60;Pending&#x60; - A payment scheduled at a later date, not yet processed. * &#x60;Authorized&#x60; - The payment has been authorized, validated, processed. * &#x60;Refused&#x60; - The payment has been refused by the bank. * &#x60;Unknown&#x60; * &#x60;Registered&#x60; - Represents a payment made offline.              Probably for an item of type * &#x60;Refunded&#x60; - The payment has been refunded. * &#x60;Refunding&#x60; - The payment is being refunded. * &#x60;Contested&#x60; - Payment has been contested by the contributor (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort payments by ascending or descending order. Default is descending (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortField|null $sort_field Sort payments by a specific field (Date or UpdateDate). Default is date (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGetRequest($organization_slug, $form_slug, $form_type, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $states = null, $sort_order = null, $sort_field = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGet'][0])
    {

        // verify the required parameter 'organization_slug' is set
        if ($organization_slug === null || (is_array($organization_slug) && count($organization_slug) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_slug when calling organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGet'
            );
        }

        // verify the required parameter 'form_slug' is set
        if ($form_slug === null || (is_array($form_slug) && count($form_slug) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_slug when calling organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGet'
            );
        }

        // verify the required parameter 'form_type' is set
        if ($form_type === null || (is_array($form_type) && count($form_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_type when calling organizationsOrganizationSlugFormsFormTypeFormSlugPaymentsGet'
            );
        }












        $resourcePath = '/organizations/{organizationSlug}/forms/{formType}/{formSlug}/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_search_key,
            'userSearchKey', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_index,
            'pageIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $continuation_token,
            'continuationToken', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $states,
            'states', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_order,
            'sortOrder', // param base name
            'HelloAssoApiV5ModelsEnumsSortOrder', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_field,
            'sortField', // param base name
            'HelloAssoApiV5ModelsEnumsSortField', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_count,
            'withCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_slug !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationSlug' . '}',
                ObjectSerializer::toPathValue($organization_slug),
                $resourcePath
            );
        }
        // path params
        if ($form_slug !== null) {
            $resourcePath = str_replace(
                '{' . 'formSlug' . '}',
                ObjectSerializer::toPathValue($form_slug),
                $resourcePath
            );
        }
        // path params
        if ($form_type !== null) {
            $resourcePath = str_replace(
                '{' . 'formType' . '}',
                ObjectSerializer::toPathValue($form_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationsOrganizationSlugPaymentsGet
     *
     * Obtenir les informations des paiements effectués sur une organisation
     *
     * @param  string $organization_slug The organization Slug (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsPaymentState[]|null $states The payment states  Available values: * &#x60;Pending&#x60; - A payment scheduled at a later date, not yet processed. * &#x60;Authorized&#x60; - The payment has been authorized, validated, processed. * &#x60;Refused&#x60; - The payment has been refused by the bank. * &#x60;Unknown&#x60; * &#x60;Registered&#x60; - Represents a payment made offline.              Probably for an item of type * &#x60;Refunded&#x60; - The payment has been refunded. * &#x60;Refunding&#x60; - The payment is being refunded. * &#x60;Contested&#x60; - Payment has been contested by the contributor (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort payments by ascending or descending order. Default is descending (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortField|null $sort_field Sort payments by a specific field (Date or UpdateDate). Default is date (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugPaymentsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function organizationsOrganizationSlugPaymentsGet($organization_slug, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $states = null, $sort_order = null, $sort_field = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugPaymentsGet'][0])
    {
        $this->organizationsOrganizationSlugPaymentsGetWithHttpInfo($organization_slug, $from, $to, $user_search_key, $page_index, $page_size, $continuation_token, $states, $sort_order, $sort_field, $with_count, $contentType);
    }

    /**
     * Operation organizationsOrganizationSlugPaymentsGetWithHttpInfo
     *
     * Obtenir les informations des paiements effectués sur une organisation
     *
     * @param  string $organization_slug The organization Slug (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsPaymentState[]|null $states The payment states  Available values: * &#x60;Pending&#x60; - A payment scheduled at a later date, not yet processed. * &#x60;Authorized&#x60; - The payment has been authorized, validated, processed. * &#x60;Refused&#x60; - The payment has been refused by the bank. * &#x60;Unknown&#x60; * &#x60;Registered&#x60; - Represents a payment made offline.              Probably for an item of type * &#x60;Refunded&#x60; - The payment has been refunded. * &#x60;Refunding&#x60; - The payment is being refunded. * &#x60;Contested&#x60; - Payment has been contested by the contributor (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort payments by ascending or descending order. Default is descending (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortField|null $sort_field Sort payments by a specific field (Date or UpdateDate). Default is date (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugPaymentsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationsOrganizationSlugPaymentsGetWithHttpInfo($organization_slug, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $states = null, $sort_order = null, $sort_field = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugPaymentsGet'][0])
    {
        $request = $this->organizationsOrganizationSlugPaymentsGetRequest($organization_slug, $from, $to, $user_search_key, $page_index, $page_size, $continuation_token, $states, $sort_order, $sort_field, $with_count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation organizationsOrganizationSlugPaymentsGetAsync
     *
     * Obtenir les informations des paiements effectués sur une organisation
     *
     * @param  string $organization_slug The organization Slug (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsPaymentState[]|null $states The payment states  Available values: * &#x60;Pending&#x60; - A payment scheduled at a later date, not yet processed. * &#x60;Authorized&#x60; - The payment has been authorized, validated, processed. * &#x60;Refused&#x60; - The payment has been refused by the bank. * &#x60;Unknown&#x60; * &#x60;Registered&#x60; - Represents a payment made offline.              Probably for an item of type * &#x60;Refunded&#x60; - The payment has been refunded. * &#x60;Refunding&#x60; - The payment is being refunded. * &#x60;Contested&#x60; - Payment has been contested by the contributor (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort payments by ascending or descending order. Default is descending (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortField|null $sort_field Sort payments by a specific field (Date or UpdateDate). Default is date (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugPaymentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationSlugPaymentsGetAsync($organization_slug, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $states = null, $sort_order = null, $sort_field = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugPaymentsGet'][0])
    {
        return $this->organizationsOrganizationSlugPaymentsGetAsyncWithHttpInfo($organization_slug, $from, $to, $user_search_key, $page_index, $page_size, $continuation_token, $states, $sort_order, $sort_field, $with_count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationsOrganizationSlugPaymentsGetAsyncWithHttpInfo
     *
     * Obtenir les informations des paiements effectués sur une organisation
     *
     * @param  string $organization_slug The organization Slug (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsPaymentState[]|null $states The payment states  Available values: * &#x60;Pending&#x60; - A payment scheduled at a later date, not yet processed. * &#x60;Authorized&#x60; - The payment has been authorized, validated, processed. * &#x60;Refused&#x60; - The payment has been refused by the bank. * &#x60;Unknown&#x60; * &#x60;Registered&#x60; - Represents a payment made offline.              Probably for an item of type * &#x60;Refunded&#x60; - The payment has been refunded. * &#x60;Refunding&#x60; - The payment is being refunded. * &#x60;Contested&#x60; - Payment has been contested by the contributor (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort payments by ascending or descending order. Default is descending (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortField|null $sort_field Sort payments by a specific field (Date or UpdateDate). Default is date (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugPaymentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationSlugPaymentsGetAsyncWithHttpInfo($organization_slug, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $states = null, $sort_order = null, $sort_field = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugPaymentsGet'][0])
    {
        $returnType = '';
        $request = $this->organizationsOrganizationSlugPaymentsGetRequest($organization_slug, $from, $to, $user_search_key, $page_index, $page_size, $continuation_token, $states, $sort_order, $sort_field, $with_count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationsOrganizationSlugPaymentsGet'
     *
     * @param  string $organization_slug The organization Slug (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsPaymentState[]|null $states The payment states  Available values: * &#x60;Pending&#x60; - A payment scheduled at a later date, not yet processed. * &#x60;Authorized&#x60; - The payment has been authorized, validated, processed. * &#x60;Refused&#x60; - The payment has been refused by the bank. * &#x60;Unknown&#x60; * &#x60;Registered&#x60; - Represents a payment made offline.              Probably for an item of type * &#x60;Refunded&#x60; - The payment has been refunded. * &#x60;Refunding&#x60; - The payment is being refunded. * &#x60;Contested&#x60; - Payment has been contested by the contributor (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort payments by ascending or descending order. Default is descending (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortField|null $sort_field Sort payments by a specific field (Date or UpdateDate). Default is date (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugPaymentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function organizationsOrganizationSlugPaymentsGetRequest($organization_slug, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $states = null, $sort_order = null, $sort_field = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugPaymentsGet'][0])
    {

        // verify the required parameter 'organization_slug' is set
        if ($organization_slug === null || (is_array($organization_slug) && count($organization_slug) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_slug when calling organizationsOrganizationSlugPaymentsGet'
            );
        }












        $resourcePath = '/organizations/{organizationSlug}/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_search_key,
            'userSearchKey', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_index,
            'pageIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $continuation_token,
            'continuationToken', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $states,
            'states', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_order,
            'sortOrder', // param base name
            'HelloAssoApiV5ModelsEnumsSortOrder', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_field,
            'sortField', // param base name
            'HelloAssoApiV5ModelsEnumsSortField', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_count,
            'withCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_slug !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationSlug' . '}',
                ObjectSerializer::toPathValue($organization_slug),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationsOrganizationSlugPaymentsSearchGet
     *
     * Rechercher des paiements.
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  int|null $page_size The number of items to retrieve (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType[]|null $form_types The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType|null $form_type The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop. This parameter must be used with the parameter formId. (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsPaymentState[]|null $states Filter results by states of payments  Available values: * &#x60;Pending&#x60; - A payment scheduled at a later date, not yet processed. * &#x60;Authorized&#x60; - The payment has been authorized, validated, processed. * &#x60;Refused&#x60; - The payment has been refused by the bank. * &#x60;Unknown&#x60; * &#x60;Registered&#x60; - Represents a payment made offline.              Probably for an item of type * &#x60;Refunded&#x60; - The payment has been refunded. * &#x60;Refunding&#x60; - The payment is being refunded. * &#x60;Contested&#x60; - Payment has been contested by the contributor (optional)
     * @param  int|null $user_id The User identifier (optional)
     * @param  string|null $search_key Filter results on user or payer first name, last name or email. (optional)
     * @param  int|null $amount Amount of the payment in cents. Filter payments with exact amount with or without the contribution. (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort payments by ascending or descending order. Default is descending (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortField|null $sort_field Sort payments by a specific field (Date or UpdateDate). Default is date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugPaymentsSearchGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ResultsWithPaginationModelPublicPaymentModel
     */
    public function organizationsOrganizationSlugPaymentsSearchGet($organization_slug, $from = null, $to = null, $page_size = 20, $continuation_token = null, $form_types = null, $form_type = null, $states = null, $user_id = null, $search_key = null, $amount = null, $sort_order = null, $sort_field = null, string $contentType = self::contentTypes['organizationsOrganizationSlugPaymentsSearchGet'][0])
    {
        list($response) = $this->organizationsOrganizationSlugPaymentsSearchGetWithHttpInfo($organization_slug, $from, $to, $page_size, $continuation_token, $form_types, $form_type, $states, $user_id, $search_key, $amount, $sort_order, $sort_field, $contentType);
        return $response;
    }

    /**
     * Operation organizationsOrganizationSlugPaymentsSearchGetWithHttpInfo
     *
     * Rechercher des paiements.
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  int|null $page_size The number of items to retrieve (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType[]|null $form_types The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType|null $form_type The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop. This parameter must be used with the parameter formId. (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsPaymentState[]|null $states Filter results by states of payments  Available values: * &#x60;Pending&#x60; - A payment scheduled at a later date, not yet processed. * &#x60;Authorized&#x60; - The payment has been authorized, validated, processed. * &#x60;Refused&#x60; - The payment has been refused by the bank. * &#x60;Unknown&#x60; * &#x60;Registered&#x60; - Represents a payment made offline.              Probably for an item of type * &#x60;Refunded&#x60; - The payment has been refunded. * &#x60;Refunding&#x60; - The payment is being refunded. * &#x60;Contested&#x60; - Payment has been contested by the contributor (optional)
     * @param  int|null $user_id The User identifier (optional)
     * @param  string|null $search_key Filter results on user or payer first name, last name or email. (optional)
     * @param  int|null $amount Amount of the payment in cents. Filter payments with exact amount with or without the contribution. (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort payments by ascending or descending order. Default is descending (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortField|null $sort_field Sort payments by a specific field (Date or UpdateDate). Default is date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugPaymentsSearchGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ResultsWithPaginationModelPublicPaymentModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationsOrganizationSlugPaymentsSearchGetWithHttpInfo($organization_slug, $from = null, $to = null, $page_size = 20, $continuation_token = null, $form_types = null, $form_type = null, $states = null, $user_id = null, $search_key = null, $amount = null, $sort_order = null, $sort_field = null, string $contentType = self::contentTypes['organizationsOrganizationSlugPaymentsSearchGet'][0])
    {
        $request = $this->organizationsOrganizationSlugPaymentsSearchGetRequest($organization_slug, $from, $to, $page_size, $continuation_token, $form_types, $form_type, $states, $user_id, $search_key, $amount, $sort_order, $sort_field, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ResultsWithPaginationModelPublicPaymentModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ResultsWithPaginationModelPublicPaymentModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ResultsWithPaginationModelPublicPaymentModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ResultsWithPaginationModelPublicPaymentModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResultsWithPaginationModelPublicPaymentModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation organizationsOrganizationSlugPaymentsSearchGetAsync
     *
     * Rechercher des paiements.
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  int|null $page_size The number of items to retrieve (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType[]|null $form_types The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType|null $form_type The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop. This parameter must be used with the parameter formId. (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsPaymentState[]|null $states Filter results by states of payments  Available values: * &#x60;Pending&#x60; - A payment scheduled at a later date, not yet processed. * &#x60;Authorized&#x60; - The payment has been authorized, validated, processed. * &#x60;Refused&#x60; - The payment has been refused by the bank. * &#x60;Unknown&#x60; * &#x60;Registered&#x60; - Represents a payment made offline.              Probably for an item of type * &#x60;Refunded&#x60; - The payment has been refunded. * &#x60;Refunding&#x60; - The payment is being refunded. * &#x60;Contested&#x60; - Payment has been contested by the contributor (optional)
     * @param  int|null $user_id The User identifier (optional)
     * @param  string|null $search_key Filter results on user or payer first name, last name or email. (optional)
     * @param  int|null $amount Amount of the payment in cents. Filter payments with exact amount with or without the contribution. (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort payments by ascending or descending order. Default is descending (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortField|null $sort_field Sort payments by a specific field (Date or UpdateDate). Default is date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugPaymentsSearchGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationSlugPaymentsSearchGetAsync($organization_slug, $from = null, $to = null, $page_size = 20, $continuation_token = null, $form_types = null, $form_type = null, $states = null, $user_id = null, $search_key = null, $amount = null, $sort_order = null, $sort_field = null, string $contentType = self::contentTypes['organizationsOrganizationSlugPaymentsSearchGet'][0])
    {
        return $this->organizationsOrganizationSlugPaymentsSearchGetAsyncWithHttpInfo($organization_slug, $from, $to, $page_size, $continuation_token, $form_types, $form_type, $states, $user_id, $search_key, $amount, $sort_order, $sort_field, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationsOrganizationSlugPaymentsSearchGetAsyncWithHttpInfo
     *
     * Rechercher des paiements.
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  int|null $page_size The number of items to retrieve (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType[]|null $form_types The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType|null $form_type The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop. This parameter must be used with the parameter formId. (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsPaymentState[]|null $states Filter results by states of payments  Available values: * &#x60;Pending&#x60; - A payment scheduled at a later date, not yet processed. * &#x60;Authorized&#x60; - The payment has been authorized, validated, processed. * &#x60;Refused&#x60; - The payment has been refused by the bank. * &#x60;Unknown&#x60; * &#x60;Registered&#x60; - Represents a payment made offline.              Probably for an item of type * &#x60;Refunded&#x60; - The payment has been refunded. * &#x60;Refunding&#x60; - The payment is being refunded. * &#x60;Contested&#x60; - Payment has been contested by the contributor (optional)
     * @param  int|null $user_id The User identifier (optional)
     * @param  string|null $search_key Filter results on user or payer first name, last name or email. (optional)
     * @param  int|null $amount Amount of the payment in cents. Filter payments with exact amount with or without the contribution. (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort payments by ascending or descending order. Default is descending (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortField|null $sort_field Sort payments by a specific field (Date or UpdateDate). Default is date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugPaymentsSearchGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationSlugPaymentsSearchGetAsyncWithHttpInfo($organization_slug, $from = null, $to = null, $page_size = 20, $continuation_token = null, $form_types = null, $form_type = null, $states = null, $user_id = null, $search_key = null, $amount = null, $sort_order = null, $sort_field = null, string $contentType = self::contentTypes['organizationsOrganizationSlugPaymentsSearchGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ResultsWithPaginationModelPublicPaymentModel';
        $request = $this->organizationsOrganizationSlugPaymentsSearchGetRequest($organization_slug, $from, $to, $page_size, $continuation_token, $form_types, $form_type, $states, $user_id, $search_key, $amount, $sort_order, $sort_field, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationsOrganizationSlugPaymentsSearchGet'
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  int|null $page_size The number of items to retrieve (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType[]|null $form_types The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType|null $form_type The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop. This parameter must be used with the parameter formId. (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsPaymentState[]|null $states Filter results by states of payments  Available values: * &#x60;Pending&#x60; - A payment scheduled at a later date, not yet processed. * &#x60;Authorized&#x60; - The payment has been authorized, validated, processed. * &#x60;Refused&#x60; - The payment has been refused by the bank. * &#x60;Unknown&#x60; * &#x60;Registered&#x60; - Represents a payment made offline.              Probably for an item of type * &#x60;Refunded&#x60; - The payment has been refunded. * &#x60;Refunding&#x60; - The payment is being refunded. * &#x60;Contested&#x60; - Payment has been contested by the contributor (optional)
     * @param  int|null $user_id The User identifier (optional)
     * @param  string|null $search_key Filter results on user or payer first name, last name or email. (optional)
     * @param  int|null $amount Amount of the payment in cents. Filter payments with exact amount with or without the contribution. (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort payments by ascending or descending order. Default is descending (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortField|null $sort_field Sort payments by a specific field (Date or UpdateDate). Default is date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugPaymentsSearchGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function organizationsOrganizationSlugPaymentsSearchGetRequest($organization_slug, $from = null, $to = null, $page_size = 20, $continuation_token = null, $form_types = null, $form_type = null, $states = null, $user_id = null, $search_key = null, $amount = null, $sort_order = null, $sort_field = null, string $contentType = self::contentTypes['organizationsOrganizationSlugPaymentsSearchGet'][0])
    {

        // verify the required parameter 'organization_slug' is set
        if ($organization_slug === null || (is_array($organization_slug) && count($organization_slug) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_slug when calling organizationsOrganizationSlugPaymentsSearchGet'
            );
        }














        $resourcePath = '/organizations/{organizationSlug}/payments/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $continuation_token,
            'continuationToken', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $form_types,
            'formTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $form_type,
            'formType', // param base name
            'HelloAssoApiV5ModelsEnumsFormType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $states,
            'states', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_key,
            'searchKey', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_order,
            'sortOrder', // param base name
            'HelloAssoApiV5ModelsEnumsSortOrder', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_field,
            'sortField', // param base name
            'HelloAssoApiV5ModelsEnumsSortField', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_slug !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationSlug' . '}',
                ObjectSerializer::toPathValue($organization_slug),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paymentsPaymentIdGet
     *
     * Obtenir les informations détaillées d&#39;un paiement.
     *
     * @param  int $payment_id The payment identifier. (required)
     * @param  bool|null $with_failed_refund_operation True to retrieve the refund operation in the states &#39;ABORTED&#39;, &#39;CANCELED&#39;, &#39;ERROR&#39;, &#39;REFUSED&#39;. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsPaymentIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsPaymentDetail
     */
    public function paymentsPaymentIdGet($payment_id, $with_failed_refund_operation = false, string $contentType = self::contentTypes['paymentsPaymentIdGet'][0])
    {
        list($response) = $this->paymentsPaymentIdGetWithHttpInfo($payment_id, $with_failed_refund_operation, $contentType);
        return $response;
    }

    /**
     * Operation paymentsPaymentIdGetWithHttpInfo
     *
     * Obtenir les informations détaillées d&#39;un paiement.
     *
     * @param  int $payment_id The payment identifier. (required)
     * @param  bool|null $with_failed_refund_operation True to retrieve the refund operation in the states &#39;ABORTED&#39;, &#39;CANCELED&#39;, &#39;ERROR&#39;, &#39;REFUSED&#39;. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsPaymentIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsPaymentDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentsPaymentIdGetWithHttpInfo($payment_id, $with_failed_refund_operation = false, string $contentType = self::contentTypes['paymentsPaymentIdGet'][0])
    {
        $request = $this->paymentsPaymentIdGetRequest($payment_id, $with_failed_refund_operation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsPaymentDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsPaymentDetail' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsPaymentDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsPaymentDetail';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsPaymentDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation paymentsPaymentIdGetAsync
     *
     * Obtenir les informations détaillées d&#39;un paiement.
     *
     * @param  int $payment_id The payment identifier. (required)
     * @param  bool|null $with_failed_refund_operation True to retrieve the refund operation in the states &#39;ABORTED&#39;, &#39;CANCELED&#39;, &#39;ERROR&#39;, &#39;REFUSED&#39;. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsPaymentIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsPaymentIdGetAsync($payment_id, $with_failed_refund_operation = false, string $contentType = self::contentTypes['paymentsPaymentIdGet'][0])
    {
        return $this->paymentsPaymentIdGetAsyncWithHttpInfo($payment_id, $with_failed_refund_operation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentsPaymentIdGetAsyncWithHttpInfo
     *
     * Obtenir les informations détaillées d&#39;un paiement.
     *
     * @param  int $payment_id The payment identifier. (required)
     * @param  bool|null $with_failed_refund_operation True to retrieve the refund operation in the states &#39;ABORTED&#39;, &#39;CANCELED&#39;, &#39;ERROR&#39;, &#39;REFUSED&#39;. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsPaymentIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsPaymentIdGetAsyncWithHttpInfo($payment_id, $with_failed_refund_operation = false, string $contentType = self::contentTypes['paymentsPaymentIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsPaymentDetail';
        $request = $this->paymentsPaymentIdGetRequest($payment_id, $with_failed_refund_operation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentsPaymentIdGet'
     *
     * @param  int $payment_id The payment identifier. (required)
     * @param  bool|null $with_failed_refund_operation True to retrieve the refund operation in the states &#39;ABORTED&#39;, &#39;CANCELED&#39;, &#39;ERROR&#39;, &#39;REFUSED&#39;. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsPaymentIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paymentsPaymentIdGetRequest($payment_id, $with_failed_refund_operation = false, string $contentType = self::contentTypes['paymentsPaymentIdGet'][0])
    {

        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling paymentsPaymentIdGet'
            );
        }



        $resourcePath = '/payments/{paymentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_failed_refund_operation,
            'withFailedRefundOperation', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paymentsPaymentIdRefundPost
     *
     * Rembourser un paiement.
     *
     * @param  int $payment_id The payment identifier. (required)
     * @param  string|null $comment The comment about this refund. (optional)
     * @param  bool|null $cancel_order Whether the future payments and linked items of this order must be canceled (possible only if the payment is fully refunded) (optional, default to false)
     * @param  bool|null $send_refund_mail Whether a refund mail must be sent or not. (optional, default to true)
     * @param  int|null $amount The amount in cents to refund. Enter this amount only for a partial refund for stripe. If not filled in then the entire payment is refunded (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsPaymentIdRefundPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsPaymentRefundOperationModel
     */
    public function paymentsPaymentIdRefundPost($payment_id, $comment = null, $cancel_order = false, $send_refund_mail = true, $amount = 0, string $contentType = self::contentTypes['paymentsPaymentIdRefundPost'][0])
    {
        list($response) = $this->paymentsPaymentIdRefundPostWithHttpInfo($payment_id, $comment, $cancel_order, $send_refund_mail, $amount, $contentType);
        return $response;
    }

    /**
     * Operation paymentsPaymentIdRefundPostWithHttpInfo
     *
     * Rembourser un paiement.
     *
     * @param  int $payment_id The payment identifier. (required)
     * @param  string|null $comment The comment about this refund. (optional)
     * @param  bool|null $cancel_order Whether the future payments and linked items of this order must be canceled (possible only if the payment is fully refunded) (optional, default to false)
     * @param  bool|null $send_refund_mail Whether a refund mail must be sent or not. (optional, default to true)
     * @param  int|null $amount The amount in cents to refund. Enter this amount only for a partial refund for stripe. If not filled in then the entire payment is refunded (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsPaymentIdRefundPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HelloAssoApiV5ModelsPaymentRefundOperationModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentsPaymentIdRefundPostWithHttpInfo($payment_id, $comment = null, $cancel_order = false, $send_refund_mail = true, $amount = 0, string $contentType = self::contentTypes['paymentsPaymentIdRefundPost'][0])
    {
        $request = $this->paymentsPaymentIdRefundPostRequest($payment_id, $comment, $cancel_order, $send_refund_mail, $amount, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\HelloAssoApiV5ModelsPaymentRefundOperationModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HelloAssoApiV5ModelsPaymentRefundOperationModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HelloAssoApiV5ModelsPaymentRefundOperationModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\HelloAssoApiV5ModelsPaymentRefundOperationModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HelloAssoApiV5ModelsPaymentRefundOperationModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation paymentsPaymentIdRefundPostAsync
     *
     * Rembourser un paiement.
     *
     * @param  int $payment_id The payment identifier. (required)
     * @param  string|null $comment The comment about this refund. (optional)
     * @param  bool|null $cancel_order Whether the future payments and linked items of this order must be canceled (possible only if the payment is fully refunded) (optional, default to false)
     * @param  bool|null $send_refund_mail Whether a refund mail must be sent or not. (optional, default to true)
     * @param  int|null $amount The amount in cents to refund. Enter this amount only for a partial refund for stripe. If not filled in then the entire payment is refunded (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsPaymentIdRefundPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsPaymentIdRefundPostAsync($payment_id, $comment = null, $cancel_order = false, $send_refund_mail = true, $amount = 0, string $contentType = self::contentTypes['paymentsPaymentIdRefundPost'][0])
    {
        return $this->paymentsPaymentIdRefundPostAsyncWithHttpInfo($payment_id, $comment, $cancel_order, $send_refund_mail, $amount, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentsPaymentIdRefundPostAsyncWithHttpInfo
     *
     * Rembourser un paiement.
     *
     * @param  int $payment_id The payment identifier. (required)
     * @param  string|null $comment The comment about this refund. (optional)
     * @param  bool|null $cancel_order Whether the future payments and linked items of this order must be canceled (possible only if the payment is fully refunded) (optional, default to false)
     * @param  bool|null $send_refund_mail Whether a refund mail must be sent or not. (optional, default to true)
     * @param  int|null $amount The amount in cents to refund. Enter this amount only for a partial refund for stripe. If not filled in then the entire payment is refunded (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsPaymentIdRefundPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsPaymentIdRefundPostAsyncWithHttpInfo($payment_id, $comment = null, $cancel_order = false, $send_refund_mail = true, $amount = 0, string $contentType = self::contentTypes['paymentsPaymentIdRefundPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\HelloAssoApiV5ModelsPaymentRefundOperationModel';
        $request = $this->paymentsPaymentIdRefundPostRequest($payment_id, $comment, $cancel_order, $send_refund_mail, $amount, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentsPaymentIdRefundPost'
     *
     * @param  int $payment_id The payment identifier. (required)
     * @param  string|null $comment The comment about this refund. (optional)
     * @param  bool|null $cancel_order Whether the future payments and linked items of this order must be canceled (possible only if the payment is fully refunded) (optional, default to false)
     * @param  bool|null $send_refund_mail Whether a refund mail must be sent or not. (optional, default to true)
     * @param  int|null $amount The amount in cents to refund. Enter this amount only for a partial refund for stripe. If not filled in then the entire payment is refunded (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsPaymentIdRefundPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paymentsPaymentIdRefundPostRequest($payment_id, $comment = null, $cancel_order = false, $send_refund_mail = true, $amount = 0, string $contentType = self::contentTypes['paymentsPaymentIdRefundPost'][0])
    {

        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling paymentsPaymentIdRefundPost'
            );
        }






        $resourcePath = '/payments/{paymentId}/refund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $comment,
            'comment', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cancel_order,
            'cancelOrder', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $send_refund_mail,
            'sendRefundMail', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
