<?php
/**
 * CommandesApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * HelloAsso API
 *
 * HelloAsso auto-generated SDK
 *
 * The version of the OpenAPI document: public
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * CommandesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CommandesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'itemsItemIdGet' => [
            'application/json',
        ],
        'ordersOrderIdCancelPost' => [
            'application/json',
        ],
        'ordersOrderIdGet' => [
            'application/json',
        ],
        'organizationsOrganizationSlugFormsFormTypeFormSlugItemsGet' => [
            'application/json',
        ],
        'organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGet' => [
            'application/json',
        ],
        'organizationsOrganizationSlugItemsGet' => [
            'application/json',
        ],
        'organizationsOrganizationSlugOrdersGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation itemsItemIdGet
     *
     * Obtenir le détail d&#39;un article contenu dans une commande
     *
     * @param  int $item_id The item ID (required)
     * @param  bool|null $with_details Set to true to return CustomFields and Options (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['itemsItemIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsItemDetail
     */
    public function itemsItemIdGet($item_id, $with_details = false, string $contentType = self::contentTypes['itemsItemIdGet'][0])
    {
        list($response) = $this->itemsItemIdGetWithHttpInfo($item_id, $with_details, $contentType);
        return $response;
    }

    /**
     * Operation itemsItemIdGetWithHttpInfo
     *
     * Obtenir le détail d&#39;un article contenu dans une commande
     *
     * @param  int $item_id The item ID (required)
     * @param  bool|null $with_details Set to true to return CustomFields and Options (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['itemsItemIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsItemDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function itemsItemIdGetWithHttpInfo($item_id, $with_details = false, string $contentType = self::contentTypes['itemsItemIdGet'][0])
    {
        $request = $this->itemsItemIdGetRequest($item_id, $with_details, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsItemDetail',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsItemDetail',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsItemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation itemsItemIdGetAsync
     *
     * Obtenir le détail d&#39;un article contenu dans une commande
     *
     * @param  int $item_id The item ID (required)
     * @param  bool|null $with_details Set to true to return CustomFields and Options (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['itemsItemIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemsItemIdGetAsync($item_id, $with_details = false, string $contentType = self::contentTypes['itemsItemIdGet'][0])
    {
        return $this->itemsItemIdGetAsyncWithHttpInfo($item_id, $with_details, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation itemsItemIdGetAsyncWithHttpInfo
     *
     * Obtenir le détail d&#39;un article contenu dans une commande
     *
     * @param  int $item_id The item ID (required)
     * @param  bool|null $with_details Set to true to return CustomFields and Options (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['itemsItemIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemsItemIdGetAsyncWithHttpInfo($item_id, $with_details = false, string $contentType = self::contentTypes['itemsItemIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsItemDetail';
        $request = $this->itemsItemIdGetRequest($item_id, $with_details, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'itemsItemIdGet'
     *
     * @param  int $item_id The item ID (required)
     * @param  bool|null $with_details Set to true to return CustomFields and Options (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['itemsItemIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function itemsItemIdGetRequest($item_id, $with_details = false, string $contentType = self::contentTypes['itemsItemIdGet'][0])
    {

        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling itemsItemIdGet'
            );
        }



        $resourcePath = '/items/{itemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_details,
            'withDetails', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdCancelPost
     *
     * Annuler les paiements futurs pour une commande (pas de remboursement).
     *
     * @param  int $order_id The order identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersOrderIdCancelPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function ordersOrderIdCancelPost($order_id, string $contentType = self::contentTypes['ordersOrderIdCancelPost'][0])
    {
        $this->ordersOrderIdCancelPostWithHttpInfo($order_id, $contentType);
    }

    /**
     * Operation ordersOrderIdCancelPostWithHttpInfo
     *
     * Annuler les paiements futurs pour une commande (pas de remboursement).
     *
     * @param  int $order_id The order identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersOrderIdCancelPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdCancelPostWithHttpInfo($order_id, string $contentType = self::contentTypes['ordersOrderIdCancelPost'][0])
    {
        $request = $this->ordersOrderIdCancelPostRequest($order_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdCancelPostAsync
     *
     * Annuler les paiements futurs pour une commande (pas de remboursement).
     *
     * @param  int $order_id The order identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersOrderIdCancelPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdCancelPostAsync($order_id, string $contentType = self::contentTypes['ordersOrderIdCancelPost'][0])
    {
        return $this->ordersOrderIdCancelPostAsyncWithHttpInfo($order_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdCancelPostAsyncWithHttpInfo
     *
     * Annuler les paiements futurs pour une commande (pas de remboursement).
     *
     * @param  int $order_id The order identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersOrderIdCancelPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdCancelPostAsyncWithHttpInfo($order_id, string $contentType = self::contentTypes['ordersOrderIdCancelPost'][0])
    {
        $returnType = '';
        $request = $this->ordersOrderIdCancelPostRequest($order_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdCancelPost'
     *
     * @param  int $order_id The order identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersOrderIdCancelPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ordersOrderIdCancelPostRequest($order_id, string $contentType = self::contentTypes['ordersOrderIdCancelPost'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling ordersOrderIdCancelPost'
            );
        }


        $resourcePath = '/orders/{orderId}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersOrderIdGet
     *
     * Obtenir des informations détaillées sur une commande
     *
     * @param  int $order_id order_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersOrderIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsOrderDetail
     */
    public function ordersOrderIdGet($order_id, string $contentType = self::contentTypes['ordersOrderIdGet'][0])
    {
        list($response) = $this->ordersOrderIdGetWithHttpInfo($order_id, $contentType);
        return $response;
    }

    /**
     * Operation ordersOrderIdGetWithHttpInfo
     *
     * Obtenir des informations détaillées sur une commande
     *
     * @param  int $order_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersOrderIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsOrderDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdGetWithHttpInfo($order_id, string $contentType = self::contentTypes['ordersOrderIdGet'][0])
    {
        $request = $this->ordersOrderIdGetRequest($order_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsOrderDetail',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsOrderDetail',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsOrderDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdGetAsync
     *
     * Obtenir des informations détaillées sur une commande
     *
     * @param  int $order_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersOrderIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdGetAsync($order_id, string $contentType = self::contentTypes['ordersOrderIdGet'][0])
    {
        return $this->ordersOrderIdGetAsyncWithHttpInfo($order_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersOrderIdGetAsyncWithHttpInfo
     *
     * Obtenir des informations détaillées sur une commande
     *
     * @param  int $order_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersOrderIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersOrderIdGetAsyncWithHttpInfo($order_id, string $contentType = self::contentTypes['ordersOrderIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\HelloAssoApiV5ModelsStatisticsOrderDetail';
        $request = $this->ordersOrderIdGetRequest($order_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersOrderIdGet'
     *
     * @param  int $order_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersOrderIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ordersOrderIdGetRequest($order_id, string $contentType = self::contentTypes['ordersOrderIdGet'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling ordersOrderIdGet'
            );
        }


        $resourcePath = '/orders/{orderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationsOrganizationSlugFormsFormTypeFormSlugItemsGet
     *
     * Obtenir une liste d&#39;articles vendus dans un formulaire
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  string $form_slug The form slug (required)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType $form_type The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsTierType[]|null $tier_types The type of tiers (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsItemState[]|null $item_states The item states  Available values: * &#x60;Processed&#x60; - The item is paid and is valid * &#x60;Registered&#x60; - The item has been registered manually by the organization and is valid * &#x60;Unknown&#x60; * &#x60;Canceled&#x60; - The item has been canceled, and is no longer valid (optional)
     * @param  string|null $tier_name The name of a tier (optional)
     * @param  bool|null $with_details Set to true to return CustomFields and Options (optional, default to false)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort forms items by ascending or descending order. Default is descending (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortField|null $sort_field Sort forms items by a specific field (Date or UpdateDate). Default is date (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugItemsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function organizationsOrganizationSlugFormsFormTypeFormSlugItemsGet($organization_slug, $form_slug, $form_type, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $tier_types = null, $item_states = null, $tier_name = null, $with_details = false, $sort_order = null, $sort_field = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugItemsGet'][0])
    {
        $this->organizationsOrganizationSlugFormsFormTypeFormSlugItemsGetWithHttpInfo($organization_slug, $form_slug, $form_type, $from, $to, $user_search_key, $page_index, $page_size, $continuation_token, $tier_types, $item_states, $tier_name, $with_details, $sort_order, $sort_field, $with_count, $contentType);
    }

    /**
     * Operation organizationsOrganizationSlugFormsFormTypeFormSlugItemsGetWithHttpInfo
     *
     * Obtenir une liste d&#39;articles vendus dans un formulaire
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  string $form_slug The form slug (required)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType $form_type The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsTierType[]|null $tier_types The type of tiers (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsItemState[]|null $item_states The item states  Available values: * &#x60;Processed&#x60; - The item is paid and is valid * &#x60;Registered&#x60; - The item has been registered manually by the organization and is valid * &#x60;Unknown&#x60; * &#x60;Canceled&#x60; - The item has been canceled, and is no longer valid (optional)
     * @param  string|null $tier_name The name of a tier (optional)
     * @param  bool|null $with_details Set to true to return CustomFields and Options (optional, default to false)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort forms items by ascending or descending order. Default is descending (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortField|null $sort_field Sort forms items by a specific field (Date or UpdateDate). Default is date (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugItemsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationsOrganizationSlugFormsFormTypeFormSlugItemsGetWithHttpInfo($organization_slug, $form_slug, $form_type, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $tier_types = null, $item_states = null, $tier_name = null, $with_details = false, $sort_order = null, $sort_field = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugItemsGet'][0])
    {
        $request = $this->organizationsOrganizationSlugFormsFormTypeFormSlugItemsGetRequest($organization_slug, $form_slug, $form_type, $from, $to, $user_search_key, $page_index, $page_size, $continuation_token, $tier_types, $item_states, $tier_name, $with_details, $sort_order, $sort_field, $with_count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation organizationsOrganizationSlugFormsFormTypeFormSlugItemsGetAsync
     *
     * Obtenir une liste d&#39;articles vendus dans un formulaire
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  string $form_slug The form slug (required)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType $form_type The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsTierType[]|null $tier_types The type of tiers (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsItemState[]|null $item_states The item states  Available values: * &#x60;Processed&#x60; - The item is paid and is valid * &#x60;Registered&#x60; - The item has been registered manually by the organization and is valid * &#x60;Unknown&#x60; * &#x60;Canceled&#x60; - The item has been canceled, and is no longer valid (optional)
     * @param  string|null $tier_name The name of a tier (optional)
     * @param  bool|null $with_details Set to true to return CustomFields and Options (optional, default to false)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort forms items by ascending or descending order. Default is descending (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortField|null $sort_field Sort forms items by a specific field (Date or UpdateDate). Default is date (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugItemsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationSlugFormsFormTypeFormSlugItemsGetAsync($organization_slug, $form_slug, $form_type, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $tier_types = null, $item_states = null, $tier_name = null, $with_details = false, $sort_order = null, $sort_field = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugItemsGet'][0])
    {
        return $this->organizationsOrganizationSlugFormsFormTypeFormSlugItemsGetAsyncWithHttpInfo($organization_slug, $form_slug, $form_type, $from, $to, $user_search_key, $page_index, $page_size, $continuation_token, $tier_types, $item_states, $tier_name, $with_details, $sort_order, $sort_field, $with_count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationsOrganizationSlugFormsFormTypeFormSlugItemsGetAsyncWithHttpInfo
     *
     * Obtenir une liste d&#39;articles vendus dans un formulaire
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  string $form_slug The form slug (required)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType $form_type The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsTierType[]|null $tier_types The type of tiers (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsItemState[]|null $item_states The item states  Available values: * &#x60;Processed&#x60; - The item is paid and is valid * &#x60;Registered&#x60; - The item has been registered manually by the organization and is valid * &#x60;Unknown&#x60; * &#x60;Canceled&#x60; - The item has been canceled, and is no longer valid (optional)
     * @param  string|null $tier_name The name of a tier (optional)
     * @param  bool|null $with_details Set to true to return CustomFields and Options (optional, default to false)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort forms items by ascending or descending order. Default is descending (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortField|null $sort_field Sort forms items by a specific field (Date or UpdateDate). Default is date (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugItemsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationSlugFormsFormTypeFormSlugItemsGetAsyncWithHttpInfo($organization_slug, $form_slug, $form_type, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $tier_types = null, $item_states = null, $tier_name = null, $with_details = false, $sort_order = null, $sort_field = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugItemsGet'][0])
    {
        $returnType = '';
        $request = $this->organizationsOrganizationSlugFormsFormTypeFormSlugItemsGetRequest($organization_slug, $form_slug, $form_type, $from, $to, $user_search_key, $page_index, $page_size, $continuation_token, $tier_types, $item_states, $tier_name, $with_details, $sort_order, $sort_field, $with_count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationsOrganizationSlugFormsFormTypeFormSlugItemsGet'
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  string $form_slug The form slug (required)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType $form_type The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsTierType[]|null $tier_types The type of tiers (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsItemState[]|null $item_states The item states  Available values: * &#x60;Processed&#x60; - The item is paid and is valid * &#x60;Registered&#x60; - The item has been registered manually by the organization and is valid * &#x60;Unknown&#x60; * &#x60;Canceled&#x60; - The item has been canceled, and is no longer valid (optional)
     * @param  string|null $tier_name The name of a tier (optional)
     * @param  bool|null $with_details Set to true to return CustomFields and Options (optional, default to false)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort forms items by ascending or descending order. Default is descending (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortField|null $sort_field Sort forms items by a specific field (Date or UpdateDate). Default is date (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugItemsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function organizationsOrganizationSlugFormsFormTypeFormSlugItemsGetRequest($organization_slug, $form_slug, $form_type, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $tier_types = null, $item_states = null, $tier_name = null, $with_details = false, $sort_order = null, $sort_field = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugItemsGet'][0])
    {

        // verify the required parameter 'organization_slug' is set
        if ($organization_slug === null || (is_array($organization_slug) && count($organization_slug) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_slug when calling organizationsOrganizationSlugFormsFormTypeFormSlugItemsGet'
            );
        }

        // verify the required parameter 'form_slug' is set
        if ($form_slug === null || (is_array($form_slug) && count($form_slug) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_slug when calling organizationsOrganizationSlugFormsFormTypeFormSlugItemsGet'
            );
        }

        // verify the required parameter 'form_type' is set
        if ($form_type === null || (is_array($form_type) && count($form_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_type when calling organizationsOrganizationSlugFormsFormTypeFormSlugItemsGet'
            );
        }















        $resourcePath = '/organizations/{organizationSlug}/forms/{formType}/{formSlug}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_search_key,
            'userSearchKey', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_index,
            'pageIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $continuation_token,
            'continuationToken', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tier_types,
            'tierTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $item_states,
            'itemStates', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tier_name,
            'tierName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_details,
            'withDetails', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_order,
            'sortOrder', // param base name
            'HelloAssoApiV5ModelsEnumsSortOrder', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_field,
            'sortField', // param base name
            'HelloAssoApiV5ModelsEnumsSortField', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_count,
            'withCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_slug !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationSlug' . '}',
                ObjectSerializer::toPathValue($organization_slug),
                $resourcePath
            );
        }
        // path params
        if ($form_slug !== null) {
            $resourcePath = str_replace(
                '{' . 'formSlug' . '}',
                ObjectSerializer::toPathValue($form_slug),
                $resourcePath
            );
        }
        // path params
        if ($form_type !== null) {
            $resourcePath = str_replace(
                '{' . 'formType' . '}',
                ObjectSerializer::toPathValue($form_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGet
     *
     * Obtenir les commandes d&#39;un formulaire
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  string $form_slug The form slug (required)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType $form_type The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  bool|null $with_details Set to true to return CustomFields (optional, default to false)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort forms orders by ascending or descending order. Default is descending (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ResultsWithPaginationModelOrder
     */
    public function organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGet($organization_slug, $form_slug, $form_type, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $with_details = false, $sort_order = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGet'][0])
    {
        list($response) = $this->organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGetWithHttpInfo($organization_slug, $form_slug, $form_type, $from, $to, $user_search_key, $page_index, $page_size, $continuation_token, $with_details, $sort_order, $with_count, $contentType);
        return $response;
    }

    /**
     * Operation organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGetWithHttpInfo
     *
     * Obtenir les commandes d&#39;un formulaire
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  string $form_slug The form slug (required)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType $form_type The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  bool|null $with_details Set to true to return CustomFields (optional, default to false)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort forms orders by ascending or descending order. Default is descending (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ResultsWithPaginationModelOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGetWithHttpInfo($organization_slug, $form_slug, $form_type, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $with_details = false, $sort_order = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGet'][0])
    {
        $request = $this->organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGetRequest($organization_slug, $form_slug, $form_type, $from, $to, $user_search_key, $page_index, $page_size, $continuation_token, $with_details, $sort_order, $with_count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResultsWithPaginationModelOrder',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ResultsWithPaginationModelOrder',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResultsWithPaginationModelOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGetAsync
     *
     * Obtenir les commandes d&#39;un formulaire
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  string $form_slug The form slug (required)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType $form_type The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  bool|null $with_details Set to true to return CustomFields (optional, default to false)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort forms orders by ascending or descending order. Default is descending (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGetAsync($organization_slug, $form_slug, $form_type, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $with_details = false, $sort_order = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGet'][0])
    {
        return $this->organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGetAsyncWithHttpInfo($organization_slug, $form_slug, $form_type, $from, $to, $user_search_key, $page_index, $page_size, $continuation_token, $with_details, $sort_order, $with_count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGetAsyncWithHttpInfo
     *
     * Obtenir les commandes d&#39;un formulaire
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  string $form_slug The form slug (required)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType $form_type The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  bool|null $with_details Set to true to return CustomFields (optional, default to false)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort forms orders by ascending or descending order. Default is descending (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGetAsyncWithHttpInfo($organization_slug, $form_slug, $form_type, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $with_details = false, $sort_order = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ResultsWithPaginationModelOrder';
        $request = $this->organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGetRequest($organization_slug, $form_slug, $form_type, $from, $to, $user_search_key, $page_index, $page_size, $continuation_token, $with_details, $sort_order, $with_count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGet'
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  string $form_slug The form slug (required)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType $form_type The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  bool|null $with_details Set to true to return CustomFields (optional, default to false)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort forms orders by ascending or descending order. Default is descending (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGetRequest($organization_slug, $form_slug, $form_type, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $with_details = false, $sort_order = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGet'][0])
    {

        // verify the required parameter 'organization_slug' is set
        if ($organization_slug === null || (is_array($organization_slug) && count($organization_slug) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_slug when calling organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGet'
            );
        }

        // verify the required parameter 'form_slug' is set
        if ($form_slug === null || (is_array($form_slug) && count($form_slug) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_slug when calling organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGet'
            );
        }

        // verify the required parameter 'form_type' is set
        if ($form_type === null || (is_array($form_type) && count($form_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_type when calling organizationsOrganizationSlugFormsFormTypeFormSlugOrdersGet'
            );
        }











        $resourcePath = '/organizations/{organizationSlug}/forms/{formType}/{formSlug}/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_search_key,
            'userSearchKey', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_index,
            'pageIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $continuation_token,
            'continuationToken', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_details,
            'withDetails', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_order,
            'sortOrder', // param base name
            'HelloAssoApiV5ModelsEnumsSortOrder', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_count,
            'withCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_slug !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationSlug' . '}',
                ObjectSerializer::toPathValue($organization_slug),
                $resourcePath
            );
        }
        // path params
        if ($form_slug !== null) {
            $resourcePath = str_replace(
                '{' . 'formSlug' . '}',
                ObjectSerializer::toPathValue($form_slug),
                $resourcePath
            );
        }
        // path params
        if ($form_type !== null) {
            $resourcePath = str_replace(
                '{' . 'formType' . '}',
                ObjectSerializer::toPathValue($form_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationsOrganizationSlugItemsGet
     *
     * Obtenir une liste d&#39;articles vendus par une organisation
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsTierType[]|null $tier_types The type of tiers Donation, Payment, Registration, Membership, MonthlyDonation, MonthlyPayment, OfflineDonation, Contribution, Bonus (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsItemState[]|null $item_states The item states  Available values: * &#x60;Processed&#x60; - The item is paid and is valid * &#x60;Registered&#x60; - The item has been registered manually by the organization and is valid * &#x60;Unknown&#x60; * &#x60;Canceled&#x60; - The item has been canceled, and is no longer valid (optional)
     * @param  string|null $tier_name The name of a tier (optional)
     * @param  bool|null $with_details Set to true to return CustomFields and Options (optional, default to false)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort organizations items by ascending or descending order. Default is descending (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortField|null $sort_field Sort organizations items by a specific field (Date or UpdateDate). Default is date (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugItemsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function organizationsOrganizationSlugItemsGet($organization_slug, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $tier_types = null, $item_states = null, $tier_name = null, $with_details = false, $sort_order = null, $sort_field = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugItemsGet'][0])
    {
        $this->organizationsOrganizationSlugItemsGetWithHttpInfo($organization_slug, $from, $to, $user_search_key, $page_index, $page_size, $continuation_token, $tier_types, $item_states, $tier_name, $with_details, $sort_order, $sort_field, $with_count, $contentType);
    }

    /**
     * Operation organizationsOrganizationSlugItemsGetWithHttpInfo
     *
     * Obtenir une liste d&#39;articles vendus par une organisation
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsTierType[]|null $tier_types The type of tiers Donation, Payment, Registration, Membership, MonthlyDonation, MonthlyPayment, OfflineDonation, Contribution, Bonus (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsItemState[]|null $item_states The item states  Available values: * &#x60;Processed&#x60; - The item is paid and is valid * &#x60;Registered&#x60; - The item has been registered manually by the organization and is valid * &#x60;Unknown&#x60; * &#x60;Canceled&#x60; - The item has been canceled, and is no longer valid (optional)
     * @param  string|null $tier_name The name of a tier (optional)
     * @param  bool|null $with_details Set to true to return CustomFields and Options (optional, default to false)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort organizations items by ascending or descending order. Default is descending (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortField|null $sort_field Sort organizations items by a specific field (Date or UpdateDate). Default is date (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugItemsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationsOrganizationSlugItemsGetWithHttpInfo($organization_slug, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $tier_types = null, $item_states = null, $tier_name = null, $with_details = false, $sort_order = null, $sort_field = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugItemsGet'][0])
    {
        $request = $this->organizationsOrganizationSlugItemsGetRequest($organization_slug, $from, $to, $user_search_key, $page_index, $page_size, $continuation_token, $tier_types, $item_states, $tier_name, $with_details, $sort_order, $sort_field, $with_count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation organizationsOrganizationSlugItemsGetAsync
     *
     * Obtenir une liste d&#39;articles vendus par une organisation
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsTierType[]|null $tier_types The type of tiers Donation, Payment, Registration, Membership, MonthlyDonation, MonthlyPayment, OfflineDonation, Contribution, Bonus (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsItemState[]|null $item_states The item states  Available values: * &#x60;Processed&#x60; - The item is paid and is valid * &#x60;Registered&#x60; - The item has been registered manually by the organization and is valid * &#x60;Unknown&#x60; * &#x60;Canceled&#x60; - The item has been canceled, and is no longer valid (optional)
     * @param  string|null $tier_name The name of a tier (optional)
     * @param  bool|null $with_details Set to true to return CustomFields and Options (optional, default to false)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort organizations items by ascending or descending order. Default is descending (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortField|null $sort_field Sort organizations items by a specific field (Date or UpdateDate). Default is date (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugItemsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationSlugItemsGetAsync($organization_slug, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $tier_types = null, $item_states = null, $tier_name = null, $with_details = false, $sort_order = null, $sort_field = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugItemsGet'][0])
    {
        return $this->organizationsOrganizationSlugItemsGetAsyncWithHttpInfo($organization_slug, $from, $to, $user_search_key, $page_index, $page_size, $continuation_token, $tier_types, $item_states, $tier_name, $with_details, $sort_order, $sort_field, $with_count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationsOrganizationSlugItemsGetAsyncWithHttpInfo
     *
     * Obtenir une liste d&#39;articles vendus par une organisation
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsTierType[]|null $tier_types The type of tiers Donation, Payment, Registration, Membership, MonthlyDonation, MonthlyPayment, OfflineDonation, Contribution, Bonus (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsItemState[]|null $item_states The item states  Available values: * &#x60;Processed&#x60; - The item is paid and is valid * &#x60;Registered&#x60; - The item has been registered manually by the organization and is valid * &#x60;Unknown&#x60; * &#x60;Canceled&#x60; - The item has been canceled, and is no longer valid (optional)
     * @param  string|null $tier_name The name of a tier (optional)
     * @param  bool|null $with_details Set to true to return CustomFields and Options (optional, default to false)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort organizations items by ascending or descending order. Default is descending (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortField|null $sort_field Sort organizations items by a specific field (Date or UpdateDate). Default is date (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugItemsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationSlugItemsGetAsyncWithHttpInfo($organization_slug, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $tier_types = null, $item_states = null, $tier_name = null, $with_details = false, $sort_order = null, $sort_field = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugItemsGet'][0])
    {
        $returnType = '';
        $request = $this->organizationsOrganizationSlugItemsGetRequest($organization_slug, $from, $to, $user_search_key, $page_index, $page_size, $continuation_token, $tier_types, $item_states, $tier_name, $with_details, $sort_order, $sort_field, $with_count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationsOrganizationSlugItemsGet'
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsTierType[]|null $tier_types The type of tiers Donation, Payment, Registration, Membership, MonthlyDonation, MonthlyPayment, OfflineDonation, Contribution, Bonus (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsItemState[]|null $item_states The item states  Available values: * &#x60;Processed&#x60; - The item is paid and is valid * &#x60;Registered&#x60; - The item has been registered manually by the organization and is valid * &#x60;Unknown&#x60; * &#x60;Canceled&#x60; - The item has been canceled, and is no longer valid (optional)
     * @param  string|null $tier_name The name of a tier (optional)
     * @param  bool|null $with_details Set to true to return CustomFields and Options (optional, default to false)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort organizations items by ascending or descending order. Default is descending (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortField|null $sort_field Sort organizations items by a specific field (Date or UpdateDate). Default is date (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugItemsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function organizationsOrganizationSlugItemsGetRequest($organization_slug, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $tier_types = null, $item_states = null, $tier_name = null, $with_details = false, $sort_order = null, $sort_field = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugItemsGet'][0])
    {

        // verify the required parameter 'organization_slug' is set
        if ($organization_slug === null || (is_array($organization_slug) && count($organization_slug) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_slug when calling organizationsOrganizationSlugItemsGet'
            );
        }















        $resourcePath = '/organizations/{organizationSlug}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_search_key,
            'userSearchKey', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_index,
            'pageIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $continuation_token,
            'continuationToken', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tier_types,
            'tierTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $item_states,
            'itemStates', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tier_name,
            'tierName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_details,
            'withDetails', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_order,
            'sortOrder', // param base name
            'HelloAssoApiV5ModelsEnumsSortOrder', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_field,
            'sortField', // param base name
            'HelloAssoApiV5ModelsEnumsSortField', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_count,
            'withCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_slug !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationSlug' . '}',
                ObjectSerializer::toPathValue($organization_slug),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationsOrganizationSlugOrdersGet
     *
     * Obtenir les commandes d&#39;une organisation
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType[]|null $form_types The type of the form CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop (optional)
     * @param  bool|null $with_details Set to true to return CustomFields (optional, default to false)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort organizations orders by ascending or descending order. Default is descending (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugOrdersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ResultsWithPaginationModelOrder
     */
    public function organizationsOrganizationSlugOrdersGet($organization_slug, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $form_types = null, $with_details = false, $sort_order = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugOrdersGet'][0])
    {
        list($response) = $this->organizationsOrganizationSlugOrdersGetWithHttpInfo($organization_slug, $from, $to, $user_search_key, $page_index, $page_size, $continuation_token, $form_types, $with_details, $sort_order, $with_count, $contentType);
        return $response;
    }

    /**
     * Operation organizationsOrganizationSlugOrdersGetWithHttpInfo
     *
     * Obtenir les commandes d&#39;une organisation
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType[]|null $form_types The type of the form CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop (optional)
     * @param  bool|null $with_details Set to true to return CustomFields (optional, default to false)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort organizations orders by ascending or descending order. Default is descending (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugOrdersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ResultsWithPaginationModelOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationsOrganizationSlugOrdersGetWithHttpInfo($organization_slug, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $form_types = null, $with_details = false, $sort_order = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugOrdersGet'][0])
    {
        $request = $this->organizationsOrganizationSlugOrdersGetRequest($organization_slug, $from, $to, $user_search_key, $page_index, $page_size, $continuation_token, $form_types, $with_details, $sort_order, $with_count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResultsWithPaginationModelOrder',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ResultsWithPaginationModelOrder',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResultsWithPaginationModelOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation organizationsOrganizationSlugOrdersGetAsync
     *
     * Obtenir les commandes d&#39;une organisation
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType[]|null $form_types The type of the form CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop (optional)
     * @param  bool|null $with_details Set to true to return CustomFields (optional, default to false)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort organizations orders by ascending or descending order. Default is descending (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugOrdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationSlugOrdersGetAsync($organization_slug, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $form_types = null, $with_details = false, $sort_order = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugOrdersGet'][0])
    {
        return $this->organizationsOrganizationSlugOrdersGetAsyncWithHttpInfo($organization_slug, $from, $to, $user_search_key, $page_index, $page_size, $continuation_token, $form_types, $with_details, $sort_order, $with_count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationsOrganizationSlugOrdersGetAsyncWithHttpInfo
     *
     * Obtenir les commandes d&#39;une organisation
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType[]|null $form_types The type of the form CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop (optional)
     * @param  bool|null $with_details Set to true to return CustomFields (optional, default to false)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort organizations orders by ascending or descending order. Default is descending (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugOrdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationSlugOrdersGetAsyncWithHttpInfo($organization_slug, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $form_types = null, $with_details = false, $sort_order = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugOrdersGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ResultsWithPaginationModelOrder';
        $request = $this->organizationsOrganizationSlugOrdersGetRequest($organization_slug, $from, $to, $user_search_key, $page_index, $page_size, $continuation_token, $form_types, $with_details, $sort_order, $with_count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationsOrganizationSlugOrdersGet'
     *
     * @param  string $organization_slug The organization slug (required)
     * @param  \DateTime|null $from First Date Filter (optional)
     * @param  \DateTime|null $to End Date Filter (exclusive) (optional)
     * @param  string|null $user_search_key Filter results on user or payer first name, last name or email (optional)
     * @param  int|null $page_index The page of results to retrieve (optional, default to 1)
     * @param  int|null $page_size The number of items per page (optional, default to 20)
     * @param  string|null $continuation_token Continuation Token from which we wish to retrieve results (optional)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsFormType[]|null $form_types The type of the form CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop (optional)
     * @param  bool|null $with_details Set to true to return CustomFields (optional, default to false)
     * @param  \OpenAPI\Client\Model\HelloAssoApiV5ModelsEnumsSortOrder|null $sort_order Sort organizations orders by ascending or descending order. Default is descending (optional)
     * @param  bool|null $with_count Whether the pagination should include totalCount and totalPages. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationsOrganizationSlugOrdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function organizationsOrganizationSlugOrdersGetRequest($organization_slug, $from = null, $to = null, $user_search_key = null, $page_index = 1, $page_size = 20, $continuation_token = null, $form_types = null, $with_details = false, $sort_order = null, $with_count = false, string $contentType = self::contentTypes['organizationsOrganizationSlugOrdersGet'][0])
    {

        // verify the required parameter 'organization_slug' is set
        if ($organization_slug === null || (is_array($organization_slug) && count($organization_slug) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_slug when calling organizationsOrganizationSlugOrdersGet'
            );
        }












        $resourcePath = '/organizations/{organizationSlug}/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_search_key,
            'userSearchKey', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_index,
            'pageIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $continuation_token,
            'continuationToken', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $form_types,
            'formTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_details,
            'withDetails', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_order,
            'sortOrder', // param base name
            'HelloAssoApiV5ModelsEnumsSortOrder', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_count,
            'withCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_slug !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationSlug' . '}',
                ObjectSerializer::toPathValue($organization_slug),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
